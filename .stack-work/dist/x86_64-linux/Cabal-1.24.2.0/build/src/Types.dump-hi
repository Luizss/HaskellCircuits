
==================== FINAL INTERFACE ====================
2018-06-09 19:11:50.338982 UTC

interface HaskellCircuits-0.1.0.0-3mIW93ol3alH6nhlDJ7Hzo:Types 8002
  interface hash: fddd88e3bd179b7bedf924ee12db248c
  ABI hash: 757470cca10fe0c859acdd7db069deaa
  export-list hash: 34058aae7a6fb4ed664b025b184c161d
  orphan hash: 6629b1a5840caea1c1c93c9586405ba7
  flag hash: 91cd76246f60d900fce8e309e594df82
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.initialDataDecls
  Types.initialTState
  Types.preDefinedfunctionsTypes
  Types.specialFuncs
  Types.typeChangesInitial
  Types.Arity
  Types.C{Types.C}
  Types.CConn
  Types.CConstr{Types.CConstr}
  Types.CFType{Types.CTAExpr Types.CTApp Types.CTArrow}
  Types.CFunc{Types.CFunc}
  Types.CGuards{Types.CGuards Types.CNoGuards}
  Types.CInput
  Types.COutput
  Types.CProc
  Types.CProcUnit{Types.BLOB Types.BREAK Types.CLEARV Types.COND Types.COPY Types.COPYV Types.DESTROY Types.DESTROYV Types.ELSE Types.ELSEIF Types.GET Types.GETINPUT Types.GETSTREAMSAFE Types.GETSTREAMV Types.IF Types.LOOP Types.MAKEV Types.PCOPY Types.PUT Types.PUTOUTPUT Types.PUTOUTPUTSTREAM Types.PUTOUTPUTSTREAMV Types.PUTSTATE Types.PUTSTREAM Types.PUTV Types.RESTV Types.SAVE Types.SAVEV Types.SWITCH}
  Types.CSignal
  Types.CompName
  Types.Constraint
  Types.Core{Types.Core}
  Types.ErrType{Types.AllInstancesUsed Types.ArityMismatch Types.CannotSynth Types.CantMatchTypes Types.ComponentNotDone Types.ConstantsHaveNoInputs Types.CouldntGetNextInstance Types.ErrConstantAsFunction Types.ExpressionConstructionErr Types.FunctionNotDeclared Types.ImpossibleConnection Types.ModifyUnexistingInstance Types.NoConnectionsForComponent Types.RecursionWithoutCondition Types.TypeNotPermitted Types.UniqueInstanceNotFound Types.VariableNotInScope Types.WrongInstanceNumberInput}
  Types.F{Types.F Types.SpecialF}
  Types.FCons{Types.FBin Types.FDec Types.FForeverWait Types.FHex}
  Types.FExpr{Types.FAExpr Types.FApp}
  Types.FGuards{Types.FGuards Types.NoFGuards}
  Types.FType{Types.Bit Types.BitVec Types.Function Types.Nat Types.Stream}
  Types.FTyped
  Types.FVar
  Types.FVarCons{Types.FCons Types.FVar}
  Types.File
  Types.FunctionClassification
  Types.HighOrder
  Types.I{Types.ConstBinI Types.ConstDecI Types.ConstHexI Types.ConstStrI Types.FifoI Types.ForkI Types.I Types.SpecialI}
  Types.Id
  Types.IsConsExpr
  Types.IsRec
  Types.Msg
  Types.Name
  Types.NameId{Types.NameId}
  Types.RecursionClassification{Types.LeftRecursive Types.MultipleRecursive Types.NonRecursive Types.NonTerminatingRecursion Types.RightRecursive}
  Types.SourceCode
  Types.SystemC
  Types.TCExpr{Types.TCAExpr Types.TCApp}
  Types.TCFunc{Types.TCFunc}
  Types.TCGuards{Types.TCGuards Types.TCNoGuards}
  Types.TComp
  Types.TCore{Types.TCore}
  Types.TErr{Types.TErr}
  Types.TFunc
  Types.TInst
  Types.TLog{Types.TLog Types.TLogDebug Types.TLogErr}
  Types.TM
  Types.TMM
  Types.TStage{Types.TInitialStage Types.TInterpretationStage}
  Types.TState{Types.TState actualStage components connections core dataDecls funcTypes functionIds instances logicalConnections logicalOutputs sourceCode systemC tCore tFuncs tLogs timesForked typeChanges typeCheckState}
  Types.TransitionType{Types.ConsRTransition Types.ConsTransition Types.FunctionTransition Types.IdTransition Types.RestTransition}
  Types.TypeClassification{Types.InputRecursive Types.NoRecursiveTypes Types.OutputInputRecursive Types.OutputRecursive}
  Types.Used
  Types.WhereMsg
module dependencies: Lexer Parser
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      transformers-0.5.2.0@transformers-0.5.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
orphans: HaskellCircuits-0.1.0.0-3mIW93ol3alH6nhlDJ7Hzo:Parser
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  Lexer c6174f684585218aa184faedf4ab7f58
  exports: c0fea5fa50c83f412bfcd8243e0a6172
  Dec 8b0f2277218f753a903427d84acf225f
  L aeabd488767cc0257d48246b31a3c8eb
  L b349f6a51d347de013d5c5d3a0eb3033
  LToken fd141e29e5214152a04ab8dbc6cb5857
  Low a60819b3a41da7c3fbdecdba34a169db
  NoLoc 1192b825a1bbdd5c089dbb8aeba295bc
  SrcLoc a30eee500ffeed73c76202d9a53d2902
  Upp 894a86340c775c101c75dc2b77ce46e2
import  -/  Parser f25442964b616089abfc3d7b05acabc3
  exports: 518f87c40b39394a3af3d07ea4f63fc3
  PExpr 1b1c5a1d1f9ac4cca7f01f2fa0906802
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
8104f895f8b3e96ad3976476ae2f7330
  $fEqCFType :: GHC.Classes.Eq Types.CFType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CFType Types.$fEqCFType_$c== Types.$fEqCFType_$c/= -}
8104f895f8b3e96ad3976476ae2f7330
  $fEqCFType_$c/= :: Types.CFType -> Types.CFType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.CFType) (b :: Types.CFType) ->
                 case Types.$fEqCFType_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8104f895f8b3e96ad3976476ae2f7330
  $fEqCFType_$c== :: Types.CFType -> Types.CFType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0476a9cdd54a10555b6e6674e2dabfae
  $fEqCProcUnit :: GHC.Classes.Eq Types.CProcUnit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CProcUnit
                  Types.$fEqCProcUnit_$c==
                  Types.$fEqCProcUnit_$c/= -}
0476a9cdd54a10555b6e6674e2dabfae
  $fEqCProcUnit_$c/= ::
    Types.CProcUnit -> Types.CProcUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.CProcUnit) (b :: Types.CProcUnit) ->
                 case Types.$fEqCProcUnit_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0476a9cdd54a10555b6e6674e2dabfae
  $fEqCProcUnit_$c== ::
    Types.CProcUnit -> Types.CProcUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fEqErrType :: GHC.Classes.Eq Types.ErrType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ErrType Types.$fEqErrType_$c== Types.$fEqErrType_$c/= -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fEqErrType_$c/= ::
    Types.ErrType -> Types.ErrType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.ErrType) (b :: Types.ErrType) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Types.ErrType x1)
                           (GHC.Prim.dataToTag# @ Types.ErrType x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fEqErrType_$c== ::
    Types.ErrType -> Types.ErrType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.ErrType) (b :: Types.ErrType) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Types.ErrType x1)
                      (GHC.Prim.dataToTag# @ Types.ErrType x2)) } }) -}
74171069deaec79bbacaae4de0c8605f
  $fEqF :: GHC.Classes.Eq Types.F
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Types.F Types.$fEqF_$c== Types.$fEqF_$c/= -}
0be0fde3fe93be76be2cbd8ea60a61ad
  $fEqF1 :: GHC.Classes.Eq (Lexer.L Types.Name)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqF_$s$fEqL -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fEqFCons :: GHC.Classes.Eq Types.FCons
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FCons Types.$fEqFCons_$c== Types.$fEqFCons_$c/= -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fEqFCons_$c/= :: Types.FCons -> Types.FCons -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.FCons) (b :: Types.FCons) ->
                 case Types.$fEqFCons_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fEqFCons_$c== :: Types.FCons -> Types.FCons -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.FCons) (ds1 :: Types.FCons) ->
                 case ds of wild {
                   Types.FBin a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FBin b1
                        -> case a1 of wild2 { Lexer.L ds2 x ->
                           case b1 of wild3 { Lexer.L ds3 y -> GHC.Base.eqString x y } } }
                   Types.FHex a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FHex b1
                        -> case a1 of wild2 { Lexer.L ds2 x ->
                           case b1 of wild3 { Lexer.L ds3 y -> GHC.Base.eqString x y } } }
                   Types.FDec a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FDec b1
                        -> case a1 of wild2 { Lexer.L ds2 x ->
                           case b1 of wild3 { Lexer.L ds3 y -> GHC.Classes.eqInt x y } } }
                   Types.FForeverWait
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FForeverWait -> GHC.Types.True } }) -}
6b3f2b074af6414441f2b2fb429b4efe
  $fEqFExpr :: GHC.Classes.Eq Types.FExpr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FExpr Types.$fEqF_$c==3 Types.$fEqFExpr_$c/= -}
6b3f2b074af6414441f2b2fb429b4efe
  $fEqFExpr_$c/= :: Types.FExpr -> Types.FExpr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.FExpr) (b :: Types.FExpr) ->
                 case Types.$fEqF_$c==3 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fEqFGuards :: GHC.Classes.Eq Types.FGuards
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FGuards Types.$fEqF_$c==2 Types.$fEqFGuards_$c/= -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fEqFGuards_$c/= ::
    Types.FGuards -> Types.FGuards -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.FGuards) (b :: Types.FGuards) ->
                 case Types.$fEqF_$c==2 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8b9bd064502b5d5eb590940bf149b133
  $fEqFType :: GHC.Classes.Eq Types.FType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FType Types.$fEqF_$c==1 Types.$fEqFType_$c/= -}
8b9bd064502b5d5eb590940bf149b133
  $fEqFType_$c/= :: Types.FType -> Types.FType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.FType) (b :: Types.FType) ->
                 case Types.$fEqF_$c==1 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
75122b63e5961b302503fd32a38ea24b
  $fEqFVarCons :: GHC.Classes.Eq Types.FVarCons
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FVarCons Types.$fEqFVarCons_$c== Types.$fEqFVarCons_$c/= -}
75122b63e5961b302503fd32a38ea24b
  $fEqFVarCons_$c/= ::
    Types.FVarCons -> Types.FVarCons -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.FVarCons) (b :: Types.FVarCons) ->
                 case Types.$fEqFVarCons_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
75122b63e5961b302503fd32a38ea24b
  $fEqFVarCons_$c== ::
    Types.FVarCons -> Types.FVarCons -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.FVarCons) (ds1 :: Types.FVarCons) ->
                 case ds of wild {
                   Types.FVar a1
                   -> case ds1 of wild1 {
                        Types.FVar b1
                        -> case a1 of wild2 { Lexer.L ds2 x ->
                           case b1 of wild3 { Lexer.L ds3 y -> GHC.Base.eqString x y } }
                        Types.FCons ipv -> GHC.Types.False }
                   Types.FCons a1
                   -> case ds1 of wild1 {
                        Types.FVar ipv -> GHC.Types.False
                        Types.FCons b1 -> Types.$fEqFCons_$c== a1 b1 } }) -}
74171069deaec79bbacaae4de0c8605f
  $fEqF_$c/= :: Types.F -> Types.F -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.F) (b :: Types.F) ->
                 case Types.$fEqF_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
74171069deaec79bbacaae4de0c8605f
  $fEqF_$c== :: Types.F -> Types.F -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.F) (ds1 :: Types.F) ->
                 case ds of wild {
                   Types.F a1 a2 a3
                   -> case ds1 of wild1 {
                        Types.F b1 b2 b3
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Types.FVar, Types.FType)
                                  Types.$fEqF_$s$fEq(,)1
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case Types.$fEqF_$c==2 a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> Types.$fEqF_$c==1 a3 b3 } }
                        Types.SpecialF -> GHC.Types.False }
                   Types.SpecialF
                   -> case ds1 of wild1 {
                        Types.F ipv ipv1 ipv2 -> GHC.Types.False
                        Types.SpecialF -> GHC.Types.True } }) -}
8b9bd064502b5d5eb590940bf149b133
  $fEqF_$c==1 :: Types.FType -> Types.FType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fEqF_$c==2 :: Types.FGuards -> Types.FGuards -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.FGuards) (ds1 :: Types.FGuards) ->
                 case ds of wild {
                   Types.FGuards a1
                   -> case ds1 of wild1 {
                        Types.FGuards b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Types.FExpr, Types.FExpr)
                             Types.$fEqF_$s$fEq(,)
                             a1
                             b1
                        Types.NoFGuards ipv -> GHC.Types.False }
                   Types.NoFGuards a1
                   -> case ds1 of wild1 {
                        Types.FGuards ipv -> GHC.Types.False
                        Types.NoFGuards b1 -> Types.$fEqF_$c==3 a1 b1 } }) -}
6b3f2b074af6414441f2b2fb429b4efe
  $fEqF_$c==3 :: Types.FExpr -> Types.FExpr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
71d24bb6ab9fa93902be91418e302579
  $fEqF_$s$fEq(,) :: GHC.Classes.Eq (Types.FExpr, Types.FExpr)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Types.FExpr, Types.FExpr)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Types.FExpr
                     @ Types.FExpr
                     Types.$fEqFExpr
                     Types.$fEqFExpr)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ Types.FExpr
                     @ Types.FExpr
                     Types.$fEqFExpr
                     Types.$fEqFExpr) -}
e5f35ac1310361916e903c4f52d88fe9
  $fEqF_$s$fEq(,)1 ::
    GHC.Classes.Eq (Lexer.L Types.Name, Types.FType)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lexer.L Types.Name, Types.FType)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Lexer.L Types.Name)
                     @ Types.FType
                     Types.$fEqF1
                     Types.$fEqFType)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (Lexer.L Types.Name)
                     @ Types.FType
                     Types.$fEqF1
                     Types.$fEqFType) -}
4bd5dc322046322b6cef95c24658b0a9
  $fEqF_$s$fEqL :: GHC.Classes.Eq (Lexer.L [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lexer.L [GHC.Types.Char])
                  Types.$fEqF_$s$fEqL_$c==
                  Types.$fEqF_$s$fEqL_$c/= -}
b8570988202e85891f769c76f3978a7c
  $fEqF_$s$fEqL_$c/= ::
    Lexer.L [GHC.Types.Char]
    -> Lexer.L [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Lexer.L [GHC.Types.Char])
                   (y :: Lexer.L [GHC.Types.Char]) ->
                 GHC.Classes.not (Types.$fEqF_$s$fEqL_$c== x y)) -}
316ac3a4b58947cccdc5695999942829
  $fEqF_$s$fEqL_$c== ::
    Lexer.L [GHC.Types.Char]
    -> Lexer.L [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Lexer.L [GHC.Types.Char])
                   (ds1 :: Lexer.L [GHC.Types.Char]) ->
                 case ds of wild { Lexer.L ds2 x ->
                 case ds1 of wild1 { Lexer.L ds3 y -> GHC.Base.eqString x y } }) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fEqI :: GHC.Classes.Eq Types.I
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Types.I Types.$fEqI_$c== Types.$fEqI_$c/= -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fEqI_$c/= :: Types.I -> Types.I -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.I) (b :: Types.I) ->
                 case Types.$fEqI_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fEqI_$c== :: Types.I -> Types.I -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
4aa1b762a773a120e02f482bc8631e08
  $fEqNameId :: GHC.Classes.Eq Types.NameId
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.NameId Types.$fEqNameId_$c== Types.$fEqNameId_$c/= -}
4aa1b762a773a120e02f482bc8631e08
  $fEqNameId_$c/= :: Types.NameId -> Types.NameId -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.NameId) (w1 :: Types.NameId) ->
                 case w of ww { Types.NameId ww1 ww2 ->
                 case w1 of ww3 { Types.NameId ww4 ww5 ->
                 Types.$w$c/= ww1 ww2 ww4 ww5 } }) -}
4aa1b762a773a120e02f482bc8631e08
  $fEqNameId_$c== :: Types.NameId -> Types.NameId -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.NameId) (w1 :: Types.NameId) ->
                 case w of ww { Types.NameId ww1 ww2 ->
                 case w1 of ww3 { Types.NameId ww4 ww5 ->
                 Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
1143e098c46af005c167ea9f06bfd94b
  $fEqRecursionClassification ::
    GHC.Classes.Eq Types.RecursionClassification
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.RecursionClassification
                  Types.$fEqRecursionClassification_$c==
                  Types.$fEqRecursionClassification_$c/= -}
1143e098c46af005c167ea9f06bfd94b
  $fEqRecursionClassification_$c/= ::
    Types.RecursionClassification
    -> Types.RecursionClassification -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.RecursionClassification)
                   (b :: Types.RecursionClassification) ->
                 case a of wild {
                   Types.LeftRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.LeftRecursive -> GHC.Types.False }
                   Types.RightRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.RightRecursive -> GHC.Types.False }
                   Types.MultipleRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.MultipleRecursive -> GHC.Types.False }
                   Types.NonTerminatingRecursion
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.NonTerminatingRecursion -> GHC.Types.False }
                   Types.NonRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.NonRecursive -> GHC.Types.False } }) -}
1143e098c46af005c167ea9f06bfd94b
  $fEqRecursionClassification_$c== ::
    Types.RecursionClassification
    -> Types.RecursionClassification -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.RecursionClassification)
                   (ds1 :: Types.RecursionClassification) ->
                 case ds of wild {
                   Types.LeftRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.LeftRecursive -> GHC.Types.True }
                   Types.RightRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.RightRecursive -> GHC.Types.True }
                   Types.MultipleRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.MultipleRecursive -> GHC.Types.True }
                   Types.NonTerminatingRecursion
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.NonTerminatingRecursion -> GHC.Types.True }
                   Types.NonRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.NonRecursive -> GHC.Types.True } }) -}
bc264b66c5f5c83a739a7acdd40704ca
  $fEqTCExpr :: GHC.Classes.Eq Types.TCExpr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCExpr Types.$fEqTCExpr_$c== Types.$fEqTCExpr_$c/= -}
bc264b66c5f5c83a739a7acdd40704ca
  $fEqTCExpr_$c/= :: Types.TCExpr -> Types.TCExpr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TCExpr) (b :: Types.TCExpr) ->
                 case Types.$fEqTCExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bc264b66c5f5c83a739a7acdd40704ca
  $fEqTCExpr_$c== :: Types.TCExpr -> Types.TCExpr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
12aff70e921393996a769ff39cd06cc8
  $fEqTCFunc :: GHC.Classes.Eq Types.TCFunc
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCFunc Types.$fEqTCFunc_$c== Types.$fEqTCFunc_$c/= -}
f734f532ba3e20d8114c58c68405c77e
  $fEqTCFunc1 :: GHC.Classes.Eq Lexer.LToken
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Types.$fEqTCFunc_$s$fEqL -}
12aff70e921393996a769ff39cd06cc8
  $fEqTCFunc_$c/= :: Types.TCFunc -> Types.TCFunc -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS)LLL),1*U(1*U(A,1*U),1*U,1*U,1*U)><S(S(LS)LLL),1*U(1*U(A,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TCFunc) (b :: Types.TCFunc) ->
                 case Types.$fEqTCFunc_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
12aff70e921393996a769ff39cd06cc8
  $fEqTCFunc_$c== :: Types.TCFunc -> Types.TCFunc -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS)LLL),1*U(1*U(A,1*U),1*U,1*U,1*U)><S(S(LS)LLL),1*U(1*U(A,1*U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.TCFunc) (w1 :: Types.TCFunc) ->
                 case w of ww { Types.TCFunc ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Lexer.L ww6 ww7 ->
                 case w1 of ww8 { Types.TCFunc ww9 ww10 ww11 ww12 ->
                 case ww9 of ww13 { Lexer.L ww14 ww15 ->
                 Types.$w$c==1 ww7 ww2 ww3 ww4 ww15 ww10 ww11 ww12 } } } }) -}
56a436ce47366ace40afb5bf26b6afb6
  $fEqTCFunc_$c==1 ::
    Types.TCGuards -> Types.TCGuards -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.TCGuards) (ds1 :: Types.TCGuards) ->
                 case ds of wild {
                   Types.TCNoGuards a1
                   -> case ds1 of wild1 {
                        Types.TCNoGuards b1 -> Types.$fEqTCExpr_$c== a1 b1
                        Types.TCGuards ipv -> GHC.Types.False }
                   Types.TCGuards a1
                   -> case ds1 of wild1 {
                        Types.TCNoGuards ipv -> GHC.Types.False
                        Types.TCGuards b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Types.TCExpr, Types.TCExpr)
                             Types.$fEqTCFunc_$s$fEq(,)
                             a1
                             b1 } }) -}
4be761646bcb02e5cf356b653cd735cf
  $fEqTCFunc_$s$fEq(,) :: GHC.Classes.Eq (Types.TCExpr, Types.TCExpr)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Types.TCExpr, Types.TCExpr)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Types.TCExpr
                     @ Types.TCExpr
                     Types.$fEqTCExpr
                     Types.$fEqTCExpr)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ Types.TCExpr
                     @ Types.TCExpr
                     Types.$fEqTCExpr
                     Types.$fEqTCExpr) -}
55994844cf8ed2d37c9e197b59c9631e
  $fEqTCFunc_$s$fEq(,)1 ::
    GHC.Classes.Eq (Lexer.L Lexer.Token, Types.CFType)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lexer.L Lexer.Token, Types.CFType)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Lexer.L Lexer.Token)
                     @ Types.CFType
                     Types.$fEqTCFunc1
                     Types.$fEqCFType)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (Lexer.L Lexer.Token)
                     @ Types.CFType
                     Types.$fEqTCFunc1
                     Types.$fEqCFType) -}
c52a81dae13667f4bb5cb1a7363e9d71
  $fEqTCFunc_$s$fEqL :: GHC.Classes.Eq (Lexer.L Lexer.Token)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lexer.L Lexer.Token)
                  Types.$fEqTCFunc_$s$fEqL_$c==
                  Types.$fEqTCFunc_$s$fEqL_$c/= -}
5639e2a11db6943baedabcd5ff642f89
  $fEqTCFunc_$s$fEqL_$c/= ::
    Lexer.L Lexer.Token -> Lexer.L Lexer.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Lexer.L Lexer.Token) (y :: Lexer.L Lexer.Token) ->
                 GHC.Classes.not (Types.$fEqTCFunc_$s$fEqL_$c== x y)) -}
9afb3f6dfbf150ce7b2b9403ea68ff3f
  $fEqTCFunc_$s$fEqL_$c== ::
    Lexer.L Lexer.Token -> Lexer.L Lexer.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Lexer.L Lexer.Token) (ds1 :: Lexer.L Lexer.Token) ->
                 case ds of wild { Lexer.L ds2 x ->
                 case ds1 of wild1 { Lexer.L ds3 y ->
                 Lexer.$fEqToken_$c== x y } }) -}
56a436ce47366ace40afb5bf26b6afb6
  $fEqTCGuards :: GHC.Classes.Eq Types.TCGuards
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCGuards Types.$fEqTCFunc_$c==1 Types.$fEqTCGuards_$c/= -}
56a436ce47366ace40afb5bf26b6afb6
  $fEqTCGuards_$c/= ::
    Types.TCGuards -> Types.TCGuards -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TCGuards) (b :: Types.TCGuards) ->
                 case Types.$fEqTCFunc_$c==1 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
37b29aaac158f03681018e20b16bb37a
  $fEqTCore :: GHC.Classes.Eq Types.TCore
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCore Types.$fEqTCore_$c== Types.$fEqTCore_$c/= -}
37b29aaac158f03681018e20b16bb37a
  $fEqTCore_$c/= :: Types.TCore -> Types.TCore -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TCore) (b :: Types.TCore) ->
                 case a of wild { Types.TCore a1 ->
                 case b of wild1 { Types.TCore b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Types.TCFunc
                        Types.$fEqTCFunc
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
37b29aaac158f03681018e20b16bb37a
  $fEqTCore_$c== :: Types.TCore -> Types.TCore -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.TCore) (ds1 :: Types.TCore) ->
                 case ds of wild { Types.TCore a1 ->
                 case ds1 of wild1 { Types.TCore b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Types.TCFunc
                   Types.$fEqTCFunc
                   a1
                   b1 } }) -}
2ca627f167c05972904f3acdfbba14a6
  $fEqTErr :: GHC.Classes.Eq Types.TErr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TErr Types.$fEqTErr_$c== Types.$fEqTErr_$c/= -}
2ca627f167c05972904f3acdfbba14a6
  $fEqTErr_$c/= :: Types.TErr -> Types.TErr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TErr) (b :: Types.TErr) ->
                 case Types.$fEqTErr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2ca627f167c05972904f3acdfbba14a6
  $fEqTErr_$c== :: Types.TErr -> Types.TErr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.TErr) (w1 :: Types.TErr) ->
                 case w of ww { Types.TErr ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Types.TErr ww6 ww7 ww8 ww9 ->
                 Types.$w$c==2 ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 } }) -}
4608f54b75b9a86394bd173384a8f6bf
  $fEqTLog :: GHC.Classes.Eq Types.TLog
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TLog Types.$fEqTLog_$c== Types.$fEqTLog_$c/= -}
4608f54b75b9a86394bd173384a8f6bf
  $fEqTLog_$c/= :: Types.TLog -> Types.TLog -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TLog) (b :: Types.TLog) ->
                 case Types.$fEqTLog_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4608f54b75b9a86394bd173384a8f6bf
  $fEqTLog_$c== :: Types.TLog -> Types.TLog -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.TLog) (ds1 :: Types.TLog) ->
                 case ds of wild {
                   Types.TLog a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.TLog b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Types.$fEqTLog_$c==1 a2 b2 } }
                   Types.TLogErr a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.TLogErr b1 b2
                        -> case a1 of ww { Types.TErr ww1 ww2 ww3 ww4 ->
                           case b1 of ww5 { Types.TErr ww6 ww7 ww8 ww9 ->
                           case Types.$w$c==2 ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Types.$fEqTLog_$c==1 a2 b2 } } } }
                   Types.TLogDebug a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.TLogDebug b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Types.$fEqTLog_$c==1 a2 b2 } } }) -}
2790536fe3b8b1cd1b284b55137862d3
  $fEqTLog_$c==1 :: Types.TStage -> Types.TStage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.TStage) (ds1 :: Types.TStage) ->
                 case ds of wild {
                   Types.TInitialStage
                   -> case ds1 of wild1 {
                        Types.TInitialStage -> GHC.Types.True
                        Types.TInterpretationStage -> GHC.Types.False }
                   Types.TInterpretationStage
                   -> case ds1 of wild1 {
                        Types.TInitialStage -> GHC.Types.False
                        Types.TInterpretationStage -> GHC.Types.True } }) -}
2790536fe3b8b1cd1b284b55137862d3
  $fEqTStage :: GHC.Classes.Eq Types.TStage
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TStage Types.$fEqTLog_$c==1 Types.$fEqTStage_$c/= -}
2790536fe3b8b1cd1b284b55137862d3
  $fEqTStage_$c/= :: Types.TStage -> Types.TStage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Types.TStage) (b :: Types.TStage) ->
                 case a of wild {
                   Types.TInitialStage
                   -> case b of wild1 {
                        Types.TInitialStage -> GHC.Types.False
                        Types.TInterpretationStage -> GHC.Types.True }
                   Types.TInterpretationStage
                   -> case b of wild1 {
                        Types.TInitialStage -> GHC.Types.True
                        Types.TInterpretationStage -> GHC.Types.False } }) -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fEqTypeClassification :: GHC.Classes.Eq Types.TypeClassification
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TypeClassification
                  Types.$fEqTypeClassification_$c==
                  Types.$fEqTypeClassification_$c/= -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fEqTypeClassification_$c/= ::
    Types.TypeClassification
    -> Types.TypeClassification -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Types.TypeClassification)
                   (b :: Types.TypeClassification) ->
                 case a of wild {
                   Types.OutputRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.OutputRecursive -> GHC.Types.False }
                   Types.InputRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.InputRecursive -> GHC.Types.False }
                   Types.OutputInputRecursive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.OutputInputRecursive -> GHC.Types.False }
                   Types.NoRecursiveTypes
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.NoRecursiveTypes -> GHC.Types.False } }) -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fEqTypeClassification_$c== ::
    Types.TypeClassification
    -> Types.TypeClassification -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Types.TypeClassification)
                   (ds1 :: Types.TypeClassification) ->
                 case ds of wild {
                   Types.OutputRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.OutputRecursive -> GHC.Types.True }
                   Types.InputRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.InputRecursive -> GHC.Types.True }
                   Types.OutputInputRecursive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.OutputInputRecursive -> GHC.Types.True }
                   Types.NoRecursiveTypes
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.NoRecursiveTypes -> GHC.Types.True } }) -}
784b7d6a2aa49dd7409f098fea375770
  $fShowC :: GHC.Show.Show Types.C
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.C
                  Types.$fShowC_$cshowsPrec2
                  Types.$fShowC_$cshow
                  Types.$fShowC_$cshowList -}
784b7d6a2aa49dd7409f098fea375770
  $fShowC1 :: Types.C -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.C) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.C ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Types.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 w1 }) -}
4760f594703de5336c5cea0252889ba1
  $fShowC10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F "#) -}
be6a969673d0e4eb039b7e6f0c0b5087
  $fShowC11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoFGuards "#) -}
2033a6ae0f98c0f6232034e4b23cfc86
  $fShowC12 ::
    (Types.FExpr, Types.FExpr) -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: (Types.FExpr, Types.FExpr))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (Types.$w$cshowsPrec5
                      0#
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows5
                         (GHC.Show.$fShow(,)_$sgo
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                            (\ (w :: GHC.Base.String) -> Types.$w$cshowsPrec5 0# ww2 w)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
5f2a5cf111ce9e933edfd55f8d6009ff
  $fShowC13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FGuards "#) -}
180e6d4b0ab68d2685a0f524ca719dc8
  $fShowC14 ::
    (Lexer.L Types.Name, Types.FType)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: (Lexer.L Types.Name, Types.FType))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (case ww1 of ww4 { Lexer.L ww3 ww5 ->
                    Lexer.$w$cshowsPrec1
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      0#
                      ww3
                      ww5
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows5
                         (GHC.Show.$fShow(,)_$sgo
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                            (\ (w :: GHC.Base.String) -> Types.$w$cshowsPrec1 0# ww2 w)
                            (GHC.Types.[] @ GHC.Show.ShowS))) }) }) -}
dbc8836b264d1c574b20dcd03977e50a
  $fShowC15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "C "#) -}
0476a9cdd54a10555b6e6674e2dabfae
  $fShowC2 :: Types.CProcUnit -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowC_$cshowsPrec Types.$fShowC3) -}
29e2343036d5af5e760d891e8d4b2cdf
  $fShowC3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9f07b82e65f7d93da94dbf9c8497ce8e
  $fShowC4 ::
    ([GHC.Types.Char], (Types.NameId, Types.CSignal),
     (Types.NameId, Types.CSignal))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2 -}
46459ed4bc82d34eddf5534edb60000e
  $fShowC5 ::
    ([GHC.Types.Char], Types.FType)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: ([GHC.Types.Char], Types.FType))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         ww1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows5
                               (GHC.Show.$fShow(,)_$sgo
                                  (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                                  (\ (w :: GHC.Base.String) -> Types.$w$cshowsPrec1 0# ww2 w)
                                  (GHC.Types.[] @ GHC.Show.ShowS)))))) }) -}
111e8d649d0e7cba837b2a5be8bfb33d
  $fShowC6 ::
    ([GHC.Types.Char], GHC.Types.Int, Types.NameId, Types.I,
     GHC.Types.Bool)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w6 :: ([GHC.Types.Char], GHC.Types.Int,
                           Types.NameId, Types.I, GHC.Types.Bool))
                   (w7 :: GHC.Base.String)[OneShot] ->
                 case w6 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         ww1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows5
                               (GHC.Show.$fShow(,,,,)_$sgo
                                  (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w7)
                                  (\ (w2 :: GHC.Base.String) ->
                                   case ww2 of ww7 { GHC.Types.I# ww8 ->
                                   case GHC.Show.$wshowSignedInt
                                          0#
                                          ww8
                                          w2 of ww9 { (#,#) ww10 ww6 ->
                                   GHC.Types.: @ GHC.Types.Char ww10 ww6 } })
                                  (GHC.Types.:
                                     @ GHC.Show.ShowS
                                     (\ (w :: GHC.Base.String) ->
                                      case ww3 of ww7 { Types.NameId ww8 ww9 ->
                                      Types.$w$cshowsPrec3 0# ww8 ww9 w })
                                     (GHC.Types.:
                                        @ GHC.Show.ShowS
                                        (\ (w :: GHC.Base.String) -> Types.$w$cshowsPrec2 0# ww4 w)
                                        (GHC.Types.:
                                           @ GHC.Show.ShowS
                                           (\ (eta :: GHC.Base.String) ->
                                            case ww5 of wild {
                                              GHC.Types.False
                                              -> letrec {
                                                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                                     {- Arity: 1, Strictness: <S,1*U> -}
                                                   = \ (ds :: [GHC.Types.Char]) ->
                                                     case ds of wild1 {
                                                       [] -> eta
                                                       : y ys
                                                       -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                                                 } in
                                                 go GHC.Show.shows18
                                              GHC.Types.True
                                              -> letrec {
                                                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                                     {- Arity: 1, Strictness: <S,1*U> -}
                                                   = \ (ds :: [GHC.Types.Char]) ->
                                                     case ds of wild1 {
                                                       [] -> eta
                                                       : y ys
                                                       -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                                                 } in
                                                 go GHC.Show.shows17 })
                                           (GHC.Types.[] @ GHC.Show.ShowS))))))))) }) -}
16f2f84af96458d13ca258ca6db8613e
  $fShowC7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NameId "#) -}
d29e1c5c2d546fca1cb985144f39a327
  $fShowC8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
b044be9e9878c3b188b87fa50dc2aac2
  $fShowC9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SpecialF"#) -}
406345940f930081e4da3d7c6154c2ec
  $fShowCConstr :: GHC.Show.Show Types.CConstr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CConstr
                  Types.$fShowCConstr_$cshowsPrec
                  Types.$fShowCConstr_$cshow
                  Types.$fShowCConstr_$cshowList -}
406345940f930081e4da3d7c6154c2ec
  $fShowCConstr1 :: Types.CConstr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.CConstr) ->
                 case w of ww { Types.CConstr ww1 ww2 ->
                 Types.$w$cshowsPrec6 0# ww1 ww2 }) -}
8104f895f8b3e96ad3976476ae2f7330
  $fShowCConstr2 :: Types.CFType -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.CFType) -> Types.$w$cshowsPrec7 0# w) -}
34023df05a41d414f66f91450c0af7f5
  $fShowCConstr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CConstr "#) -}
406345940f930081e4da3d7c6154c2ec
  $fShowCConstr_$cshow :: Types.CConstr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U),1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.CConstr) ->
                 case w of ww { Types.CConstr ww1 ww2 ->
                 Types.$w$cshow ww1 ww2 }) -}
406345940f930081e4da3d7c6154c2ec
  $fShowCConstr_$cshowList :: [Types.CConstr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.CConstr
                   Types.$fShowCConstr1) -}
406345940f930081e4da3d7c6154c2ec
  $fShowCConstr_$cshowsPrec ::
    GHC.Types.Int -> Types.CConstr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.CConstr) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.CConstr ww3 ww4 ->
                 Types.$w$cshowsPrec6 ww1 ww3 ww4 } }) -}
8104f895f8b3e96ad3976476ae2f7330
  $fShowCFType :: GHC.Show.Show Types.CFType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CFType
                  Types.$fShowCFType_$cshowsPrec
                  Types.$fShowCFType_$cshow
                  Types.$fShowCFType_$cshowList -}
8104f895f8b3e96ad3976476ae2f7330
  $fShowCFType_$cshow :: Types.CFType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.CFType) ->
                 Types.$fShowCFType_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8104f895f8b3e96ad3976476ae2f7330
  $fShowCFType_$cshowList :: [Types.CFType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.CFType
                   Types.$fShowCConstr2) -}
8104f895f8b3e96ad3976476ae2f7330
  $fShowCFType_$cshowsPrec ::
    GHC.Types.Int -> Types.CFType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.CFType) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec7 ww1 w1 }) -}
1710acfef62a9879edfeaff433f44f9c
  $fShowCFunc :: GHC.Show.Show Types.CFunc
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CFunc
                  Types.$fShowCFunc_$cshowsPrec
                  Types.$fShowCFunc_$cshow
                  Types.$fShowCFunc_$cshowList -}
1710acfef62a9879edfeaff433f44f9c
  $fShowCFunc1 :: Types.CFunc -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.CFunc) ->
                 case w of ww { Types.CFunc ww1 ww2 ww3 ww4 ->
                 Types.$w$cshowsPrec8 0# ww1 ww2 ww3 ww4 }) -}
d43a08e3556ed1af86a5ff31c71a8d42
  $fShowCFunc2 :: Lexer.L Lexer.Token -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w2 :: Lexer.L Lexer.Token) ->
                 case w2 of ww2 { Lexer.L ww3 ww4 ->
                 Lexer.$w$cshowsPrec1
                   @ Lexer.Token
                   Lexer.$fShowToken
                   0#
                   ww3
                   ww4 }) -}
8c140d3130d75a3e9a9601de74239e57
  $fShowCFunc3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CFunc "#) -}
ba0c34ea2241e45f5331ee783876d24d
  $fShowCFunc4 ::
    (Parser.PExpr, Parser.PExpr) -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: (Parser.PExpr, Parser.PExpr))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (Parser.$w$cshowsPrec6
                      0#
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows5
                         (GHC.Show.$fShow(,)_$sgo
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                            (Parser.$w$cshowsPrec6 0# ww2)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
bed89c1a14bde81cbee76f227b261691
  $fShowCFunc5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CGuards "#) -}
38369204bf16eb8ed30d0797927600b5
  $fShowCFunc6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CNoGuards "#) -}
1710acfef62a9879edfeaff433f44f9c
  $fShowCFunc_$cshow :: Types.CFunc -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U),U,1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.CFunc) ->
                 Types.$fShowCFunc_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1710acfef62a9879edfeaff433f44f9c
  $fShowCFunc_$cshowList :: [Types.CFunc] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.CFunc
                   Types.$fShowCFunc1) -}
1710acfef62a9879edfeaff433f44f9c
  $fShowCFunc_$cshowsPrec ::
    GHC.Types.Int -> Types.CFunc -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U),U,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.CFunc) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.CFunc ww3 ww4 ww5 ww6 ->
                 Types.$w$cshowsPrec8 ww1 ww3 ww4 ww5 ww6 } }) -}
294e122f69eabf0fb6865528d745d6f2
  $fShowCGuards :: GHC.Show.Show Types.CGuards
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CGuards
                  Types.$fShowCGuards_$cshowsPrec
                  Types.$fShowCGuards_$cshow
                  Types.$fShowCGuards_$cshowList -}
294e122f69eabf0fb6865528d745d6f2
  $fShowCGuards1 :: Types.CGuards -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.CGuards) -> Types.$w$cshowsPrec9 0# w) -}
294e122f69eabf0fb6865528d745d6f2
  $fShowCGuards_$cshow :: Types.CGuards -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.CGuards) ->
                 case x of wild {
                   Types.CNoGuards b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCFunc6
                        (Parser.$w$cshowsPrec6 11# b1 (GHC.Types.[] @ GHC.Types.Char))
                   Types.CGuards b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCFunc5
                        (GHC.Show.showList__
                           @ (Parser.PExpr, Parser.PExpr)
                           Types.$fShowCFunc4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
294e122f69eabf0fb6865528d745d6f2
  $fShowCGuards_$cshowList :: [Types.CGuards] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.CGuards
                   Types.$fShowCGuards1) -}
294e122f69eabf0fb6865528d745d6f2
  $fShowCGuards_$cshowsPrec ::
    GHC.Types.Int -> Types.CGuards -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.CGuards) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec9 ww1 w1 }) -}
0476a9cdd54a10555b6e6674e2dabfae
  $fShowCProcUnit :: GHC.Show.Show Types.CProcUnit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.CProcUnit
                  Types.$fShowC_$cshowsPrec
                  Types.$fShowCProcUnit_$cshow
                  Types.$fShowCProcUnit_$cshowList -}
0476a9cdd54a10555b6e6674e2dabfae
  $fShowCProcUnit_$cshow :: Types.CProcUnit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.CProcUnit) ->
                 Types.$fShowC_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0476a9cdd54a10555b6e6674e2dabfae
  $fShowCProcUnit_$cshowList :: [Types.CProcUnit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.CProcUnit
                   Types.$fShowC2) -}
784b7d6a2aa49dd7409f098fea375770
  $fShowC_$cshow :: Types.C -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U(1*U,U),1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.C) ->
                 Types.$fShowC_$cshowsPrec2
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
784b7d6a2aa49dd7409f098fea375770
  $fShowC_$cshowList :: [Types.C] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.C Types.$fShowC1) -}
0476a9cdd54a10555b6e6674e2dabfae
  $fShowC_$cshowsPrec ::
    GHC.Types.Int -> Types.CProcUnit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
74171069deaec79bbacaae4de0c8605f
  $fShowC_$cshowsPrec1 :: GHC.Types.Int -> Types.F -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.F)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.F b1 b2 b3
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (Lexer.L Types.Name, Types.FType)
                            Types.$fShowC14
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Types.$w$cshowsPrec4
                                  11#
                                  b2
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (Types.$w$cshowsPrec1 11# b3 x1))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char Types.$fShowC10 (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowC10
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta))) } }
                   Types.SpecialF
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowC9 eta }) -}
784b7d6a2aa49dd7409f098fea375770
  $fShowC_$cshowsPrec2 :: GHC.Types.Int -> Types.C -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(1*U,U),1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.C) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.C ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Types.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
438d7d9868420ea466e01d42ff11e8f8
  $fShowCore :: GHC.Show.Show Types.Core
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Core
                  Types.$fShowCore_$cshowsPrec
                  Types.$fShowCore_$cshow
                  Types.$fShowCore_$cshowList -}
438d7d9868420ea466e01d42ff11e8f8
  $fShowCore1 :: Types.Core -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.Core) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.Core ww1 ->
                 Types.$w$cshowsPrec10 0# ww1 w1 }) -}
5396ce9b39b15818eb04af170e3b768a
  $fShowCore2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Core "#) -}
438d7d9868420ea466e01d42ff11e8f8
  $fShowCore_$cshow :: Types.Core -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.Core) ->
                 case x of wild { Types.Core b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowCore2)
                   (GHC.Show.showList__
                      @ Types.CFunc
                      Types.$fShowCFunc1
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
438d7d9868420ea466e01d42ff11e8f8
  $fShowCore_$cshowList :: [Types.Core] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.Core Types.$fShowCore1) -}
438d7d9868420ea466e01d42ff11e8f8
  $fShowCore_$cshowsPrec ::
    GHC.Types.Int -> Types.Core -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.Core)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.Core ww3 ->
                 Types.$w$cshowsPrec10 ww1 ww3 w2 } }) -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fShowErrType :: GHC.Show.Show Types.ErrType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.ErrType
                  Types.$fShowErrType_$cshowsPrec
                  Types.$fShowErrType_$cshow
                  Types.$fShowErrType_$cshowList -}
158f1e0acea769c5275e0397f6bb8158
  $fShowErrType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CantMatchTypes"#) -}
a2c58b7a842927fb9ecb3a88ca175914
  $fShowErrType10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "CouldntGetNextInstance"#) -}
781984b8f203ba8a554a90a9f7b1c3d8
  $fShowErrType11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "NoConnectionsForComponent"#) -}
4c23373dacf46eaccc25e043295b9b3d
  $fShowErrType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AllInstancesUsed"#) -}
49afb4974ca52e29cdaa7f322ac310da
  $fShowErrType13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ModifyUnexistingInstance"#) -}
4c8b78d2db8e02ebb8cb61283ac540cb
  $fShowErrType14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "UniqueInstanceNotFound"#) -}
a672617e93a0007f6458368491b91d7d
  $fShowErrType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ComponentNotDone"#) -}
f9a1041093710051c12b5cee3c660546
  $fShowErrType16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "FunctionNotDeclared"#) -}
375c8dc8f728756e6cdace8a123f538c
  $fShowErrType17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ArityMismatch"#) -}
aa9d70aedac8c5ba397c1253bf07727e
  $fShowErrType18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ErrConstantAsFunction"#) -}
71db5da5a6541b22583bc2923182ef25
  $fShowErrType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "RecursionWithoutCondition"#) -}
6dccb9ba15041451af8d1fdaa5afbbda
  $fShowErrType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CannotSynth"#) -}
60bf11ed9dbf1c8d086c5c4637ac20d5
  $fShowErrType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeNotPermitted"#) -}
cf209d6fb4af90c3cb262ee4fb12d111
  $fShowErrType5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ExpressionConstructionErr"#) -}
09e5a0a0fbe31a1de1a81ad2bf2cae3d
  $fShowErrType6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ImpossibleConnection"#) -}
34cd34be05a07e0a008057338014f2cd
  $fShowErrType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ConstantsHaveNoInputs"#) -}
161ef2c194fc3361d60ebfe58aa95f31
  $fShowErrType8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "WrongInstanceNumberInput"#) -}
62cc1cb1659dad7cbcc1e485347227e4
  $fShowErrType9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VariableNotInScope"#) -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fShowErrType_$cshow :: Types.ErrType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.ErrType) ->
                 Types.$fShowErrType_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fShowErrType_$cshowList :: [Types.ErrType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.ErrType
                   Types.$w$cshowsPrec11) -}
a8550adbd441eb2b0a2572d15ca96e5a
  $fShowErrType_$cshowsPrec ::
    GHC.Types.Int -> Types.ErrType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.ErrType)
                   (w2 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec11 w1 w2) -}
74171069deaec79bbacaae4de0c8605f
  $fShowF :: GHC.Show.Show Types.F
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.F
                  Types.$fShowC_$cshowsPrec1
                  Types.$fShowF_$cshow
                  Types.$fShowF_$cshowList -}
74171069deaec79bbacaae4de0c8605f
  $fShowF1 :: Types.F -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowC_$cshowsPrec1 Types.$fShowC3) -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fShowFCons :: GHC.Show.Show Types.FCons
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FCons
                  Types.$fShowFCons_$cshowsPrec
                  Types.$fShowFCons_$cshow
                  Types.$fShowFCons_$cshowList -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fShowFCons1 :: Types.FCons -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Types.$fShowFCons_$cshowsPrec Types.$fShowC3) -}
f504c2e1f3764715a90f9d09e5070e7b
  $fShowFCons2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Types.$fShowFCons3) -}
c4c6b51fe67ceae7f08fde76f429f822
  $fShowFCons3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FForeverWait"#) -}
a722df4c128a9631d0cf72b68be34156
  $fShowFCons4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FDec "#) -}
29cabd640d83f795c98164cbc7083ee8
  $fShowFCons5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FHex "#) -}
64791826eadd7b5dd80f90e2bfc15f02
  $fShowFCons6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FBin "#) -}
0f431980ffd2e14f7622c85cbe700c82
  $fShowFCons7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowFCons3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fShowFCons_$cshow :: Types.FCons -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.FCons) ->
                 case x of wild {
                   Types.FBin b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowFCons6
                        (case b1 of ww2 { Lexer.L ww3 ww4 ->
                         Lexer.$w$cshowsPrec1
                           @ [GHC.Types.Char]
                           GHC.Show.$fShow[]_$s$fShow[]1
                           11#
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Types.FHex b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowFCons5
                        (case b1 of ww2 { Lexer.L ww3 ww4 ->
                         Lexer.$w$cshowsPrec1
                           @ [GHC.Types.Char]
                           GHC.Show.$fShow[]_$s$fShow[]1
                           11#
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Types.FDec b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowFCons4
                        (case b1 of ww2 { Lexer.L ww3 ww4 ->
                         Lexer.$w$cshowsPrec1
                           @ GHC.Types.Int
                           GHC.Show.$fShowInt
                           11#
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Types.FForeverWait -> Types.$fShowFCons7 }) -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fShowFCons_$cshowList :: [Types.FCons] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.FCons
                   Types.$fShowFCons1) -}
2ec890fe0c2f9bbc85377a0c9d5e9581
  $fShowFCons_$cshowsPrec ::
    GHC.Types.Int -> Types.FCons -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int) (ds :: Types.FCons) ->
                 case ds of wild {
                   Types.FBin b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Lexer.L ww3 ww4 ->
                          Lexer.$w$cshowsPrec1
                            @ [GHC.Types.Char]
                            GHC.Show.$fShow[]_$s$fShow[]1
                            11#
                            ww3
                            ww4 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowFCons6 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowFCons6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1))) } }
                   Types.FHex b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Lexer.L ww3 ww4 ->
                          Lexer.$w$cshowsPrec1
                            @ [GHC.Types.Char]
                            GHC.Show.$fShow[]_$s$fShow[]1
                            11#
                            ww3
                            ww4 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowFCons5 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowFCons5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1))) } }
                   Types.FDec b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Lexer.L ww3 ww4 ->
                          Lexer.$w$cshowsPrec1
                            @ GHC.Types.Int
                            GHC.Show.$fShowInt
                            11#
                            ww3
                            ww4 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowFCons4 (g x1)
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowFCons4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1))) } }
                   Types.FForeverWait -> Types.$fShowFCons2 }) -}
6b3f2b074af6414441f2b2fb429b4efe
  $fShowFExpr :: GHC.Show.Show Types.FExpr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FExpr
                  Types.$fShowFExpr_$cshowsPrec
                  Types.$fShowFExpr_$cshow
                  Types.$fShowFExpr_$cshowList -}
6b3f2b074af6414441f2b2fb429b4efe
  $fShowFExpr1 :: Types.FExpr -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.FExpr) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec5 0# w w1) -}
6b3f2b074af6414441f2b2fb429b4efe
  $fShowFExpr_$cshow :: Types.FExpr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.FExpr) ->
                 Types.$fShowFExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6b3f2b074af6414441f2b2fb429b4efe
  $fShowFExpr_$cshowList :: [Types.FExpr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.FExpr
                   Types.$fShowFExpr1) -}
6b3f2b074af6414441f2b2fb429b4efe
  $fShowFExpr_$cshowsPrec ::
    GHC.Types.Int -> Types.FExpr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.FExpr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec5 ww1 w1 w2 }) -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fShowFGuards :: GHC.Show.Show Types.FGuards
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FGuards
                  Types.$fShowFGuards_$cshowsPrec
                  Types.$fShowFGuards_$cshow
                  Types.$fShowFGuards_$cshowList -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fShowFGuards1 :: Types.FGuards -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.FGuards) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec4 0# w w1) -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fShowFGuards_$cshow :: Types.FGuards -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.FGuards) ->
                 Types.$fShowFGuards_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fShowFGuards_$cshowList :: [Types.FGuards] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.FGuards
                   Types.$fShowFGuards1) -}
f0164379fcbf1ee84d79a6d7cd973f63
  $fShowFGuards_$cshowsPrec ::
    GHC.Types.Int -> Types.FGuards -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.FGuards)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec4 ww1 w1 w2 }) -}
8b9bd064502b5d5eb590940bf149b133
  $fShowFType :: GHC.Show.Show Types.FType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FType
                  Types.$fShowFType_$cshowsPrec
                  Types.$fShowFType_$cshow
                  Types.$fShowFType_$cshowList -}
8b9bd064502b5d5eb590940bf149b133
  $fShowFType1 :: Types.FType -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.FType) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec1 0# w w1) -}
8b9bd064502b5d5eb590940bf149b133
  $fShowFType_$cshow :: Types.FType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.FType) ->
                 Types.$fShowFType_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8b9bd064502b5d5eb590940bf149b133
  $fShowFType_$cshowList :: [Types.FType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.FType
                   Types.$fShowFType1) -}
8b9bd064502b5d5eb590940bf149b133
  $fShowFType_$cshowsPrec ::
    GHC.Types.Int -> Types.FType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.FType)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec1 ww1 w1 w2 }) -}
75122b63e5961b302503fd32a38ea24b
  $fShowFVarCons :: GHC.Show.Show Types.FVarCons
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.FVarCons
                  Types.$fShowFVarCons_$cshowsPrec
                  Types.$fShowFVarCons_$cshow
                  Types.$fShowFVarCons_$cshowList -}
75122b63e5961b302503fd32a38ea24b
  $fShowFVarCons1 :: Types.FVarCons -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.FVarCons) ->
                 Types.$w$cshowsPrec12 0# w) -}
243312c6ea48241be1d0e9576d23cbab
  $fShowFVarCons2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FCons "#) -}
ec84ffc27065e679441f3d140a71dd3d
  $fShowFVarCons3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FVar "#) -}
a0a7ac59af32f8e717d99a364ed11c0a
  $fShowFVarCons4 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
75122b63e5961b302503fd32a38ea24b
  $fShowFVarCons_$cshow :: Types.FVarCons -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.FVarCons) ->
                 case x of wild {
                   Types.FVar b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowFVarCons3
                        (case b1 of ww2 { Lexer.L ww3 ww4 ->
                         Lexer.$w$cshowsPrec1
                           @ [GHC.Types.Char]
                           GHC.Show.$fShow[]_$s$fShow[]1
                           11#
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Types.FCons b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowFVarCons2
                        (case b1 of wild1 {
                           Types.FBin b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows7
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowFCons6
                                   (case b2 of ww2 { Lexer.L ww3 ww4 ->
                                    Lexer.$w$cshowsPrec1
                                      @ [GHC.Types.Char]
                                      GHC.Show.$fShow[]_$s$fShow[]1
                                      11#
                                      ww3
                                      ww4
                                      Types.$fShowFVarCons4 }))
                           Types.FHex b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows7
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowFCons5
                                   (case b2 of ww2 { Lexer.L ww3 ww4 ->
                                    Lexer.$w$cshowsPrec1
                                      @ [GHC.Types.Char]
                                      GHC.Show.$fShow[]_$s$fShow[]1
                                      11#
                                      ww3
                                      ww4
                                      Types.$fShowFVarCons4 }))
                           Types.FDec b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows7
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowFCons4
                                   (case b2 of ww2 { Lexer.L ww3 ww4 ->
                                    Lexer.$w$cshowsPrec1
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      11#
                                      ww3
                                      ww4
                                      Types.$fShowFVarCons4 }))
                           Types.FForeverWait -> Types.$fShowFCons7 }) }) -}
75122b63e5961b302503fd32a38ea24b
  $fShowFVarCons_$cshowList :: [Types.FVarCons] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.FVarCons
                   Types.$fShowFVarCons1) -}
75122b63e5961b302503fd32a38ea24b
  $fShowFVarCons_$cshowsPrec ::
    GHC.Types.Int -> Types.FVarCons -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.FVarCons) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec12 ww1 w1 }) -}
74171069deaec79bbacaae4de0c8605f
  $fShowF_$cshow :: Types.F -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.F) ->
                 Types.$fShowC_$cshowsPrec1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
74171069deaec79bbacaae4de0c8605f
  $fShowF_$cshowList :: [Types.F] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.F Types.$fShowF1) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fShowI :: GHC.Show.Show Types.I
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.I
                  Types.$fShowI_$cshowsPrec
                  Types.$fShowI_$cshow
                  Types.$fShowI_$cshowList -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fShowI1 :: Types.I -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.I) (w1 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec2 0# w w1) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fShowI_$cshow :: Types.I -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.I) ->
                 Types.$fShowI_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fShowI_$cshowList :: [Types.I] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.I Types.$fShowI1) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $fShowI_$cshowsPrec :: GHC.Types.Int -> Types.I -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.I) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec2 ww1 w1 w2 }) -}
4aa1b762a773a120e02f482bc8631e08
  $fShowNameId :: GHC.Show.Show Types.NameId
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.NameId
                  Types.$fShowNameId_$cshowsPrec
                  Types.$fShowNameId_$cshow
                  Types.$fShowNameId_$cshowList -}
4aa1b762a773a120e02f482bc8631e08
  $fShowNameId1 :: Types.NameId -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.NameId) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.NameId ww1 ww2 ->
                 Types.$w$cshowsPrec3 0# ww1 ww2 w1 }) -}
4aa1b762a773a120e02f482bc8631e08
  $fShowNameId_$cshow :: Types.NameId -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.NameId) ->
                 Types.$fShowNameId_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4aa1b762a773a120e02f482bc8631e08
  $fShowNameId_$cshowList :: [Types.NameId] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.NameId
                   Types.$fShowNameId1) -}
4aa1b762a773a120e02f482bc8631e08
  $fShowNameId_$cshowsPrec ::
    GHC.Types.Int -> Types.NameId -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.NameId)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.NameId ww3 ww4 ->
                 Types.$w$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
1143e098c46af005c167ea9f06bfd94b
  $fShowRecursionClassification ::
    GHC.Show.Show Types.RecursionClassification
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.RecursionClassification
                  Types.$fShowRecursionClassification_$cshowsPrec
                  Types.$fShowRecursionClassification_$cshow
                  Types.$fShowRecursionClassification_$cshowList -}
fa29848ab1feadcde3d2b22706eee905
  $fShowRecursionClassification1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NonRecursive"#) -}
5d254c38394c9df37c6d4206943143d9
  $fShowRecursionClassification2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "NonTerminatingRecursion"#) -}
55e8aa8314a8a580c269142df07f729a
  $fShowRecursionClassification3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MultipleRecursive"#) -}
df318cfeca650426210691334a868453
  $fShowRecursionClassification4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RightRecursive"#) -}
d7f3225b5664f8c24be43220e9c14dbe
  $fShowRecursionClassification5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LeftRecursive"#) -}
1143e098c46af005c167ea9f06bfd94b
  $fShowRecursionClassification_$cshow ::
    Types.RecursionClassification -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.RecursionClassification) ->
                 Types.$fShowRecursionClassification_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1143e098c46af005c167ea9f06bfd94b
  $fShowRecursionClassification_$cshowList ::
    [Types.RecursionClassification] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.RecursionClassification
                   Types.$w$cshowsPrec13) -}
1143e098c46af005c167ea9f06bfd94b
  $fShowRecursionClassification_$cshowsPrec ::
    GHC.Types.Int -> Types.RecursionClassification -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.RecursionClassification)
                   (w2 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec13 w1 w2) -}
bc264b66c5f5c83a739a7acdd40704ca
  $fShowTCExpr :: GHC.Show.Show Types.TCExpr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCExpr
                  Types.$fShowTCExpr_$cshowsPrec
                  Types.$fShowTCExpr_$cshow
                  Types.$fShowTCExpr_$cshowList -}
bc264b66c5f5c83a739a7acdd40704ca
  $fShowTCExpr1 :: Types.TCExpr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.TCExpr) -> Types.$w$cshowsPrec14 0# w) -}
bc264b66c5f5c83a739a7acdd40704ca
  $fShowTCExpr_$cshow :: Types.TCExpr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TCExpr) ->
                 Types.$fShowTCExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bc264b66c5f5c83a739a7acdd40704ca
  $fShowTCExpr_$cshowList :: [Types.TCExpr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TCExpr
                   Types.$fShowTCExpr1) -}
bc264b66c5f5c83a739a7acdd40704ca
  $fShowTCExpr_$cshowsPrec ::
    GHC.Types.Int -> Types.TCExpr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.TCExpr) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec14 ww1 w1 }) -}
12aff70e921393996a769ff39cd06cc8
  $fShowTCFunc :: GHC.Show.Show Types.TCFunc
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCFunc
                  Types.$fShowTCFunc_$cshowsPrec
                  Types.$fShowTCFunc_$cshow
                  Types.$fShowTCFunc_$cshowList -}
12aff70e921393996a769ff39cd06cc8
  $fShowTCFunc1 :: Types.TCFunc -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.TCFunc) ->
                 case w of ww { Types.TCFunc ww1 ww2 ww3 ww4 ->
                 Types.$w$cshowsPrec15 0# ww1 ww2 ww3 ww4 }) -}
720a84b246043a61dfd94c66081c679b
  $fShowTCFunc2 ::
    (Lexer.L Lexer.Token, Types.CFType)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: (Lexer.L Lexer.Token, Types.CFType))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (case ww1 of ww4 { Lexer.L ww3 ww5 ->
                    Lexer.$w$cshowsPrec1
                      @ Lexer.Token
                      Lexer.$fShowToken
                      0#
                      ww3
                      ww5
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows5
                         (GHC.Show.$fShow(,)_$sgo
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                            (Types.$w$cshowsPrec7 0# ww2)
                            (GHC.Types.[] @ GHC.Show.ShowS))) }) }) -}
66e29f728c990df96ef3ba3f5f4668d3
  $fShowTCFunc3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TCFunc "#) -}
8c6f68aad165a871f9d2041c6fd79cf3
  $fShowTCFunc4 ::
    (Types.TCExpr, Types.TCExpr) -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: (Types.TCExpr, Types.TCExpr))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (Types.$w$cshowsPrec14
                      0#
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows5
                         (GHC.Show.$fShow(,)_$sgo
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                            (Types.$w$cshowsPrec14 0# ww2)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
6f580754827c1b9472edacea97abf2b3
  $fShowTCFunc5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TCGuards "#) -}
cf92a1cce8e94155094b400bb5bb6642
  $fShowTCFunc6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TCNoGuards "#) -}
12aff70e921393996a769ff39cd06cc8
  $fShowTCFunc_$cshow :: Types.TCFunc -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U),U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TCFunc) ->
                 Types.$fShowTCFunc_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
12aff70e921393996a769ff39cd06cc8
  $fShowTCFunc_$cshowList :: [Types.TCFunc] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TCFunc
                   Types.$fShowTCFunc1) -}
12aff70e921393996a769ff39cd06cc8
  $fShowTCFunc_$cshowsPrec ::
    GHC.Types.Int -> Types.TCFunc -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U),U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.TCFunc) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.TCFunc ww3 ww4 ww5 ww6 ->
                 Types.$w$cshowsPrec15 ww1 ww3 ww4 ww5 ww6 } }) -}
56a436ce47366ace40afb5bf26b6afb6
  $fShowTCGuards :: GHC.Show.Show Types.TCGuards
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCGuards
                  Types.$fShowTCGuards_$cshowsPrec
                  Types.$fShowTCGuards_$cshow
                  Types.$fShowTCGuards_$cshowList -}
56a436ce47366ace40afb5bf26b6afb6
  $fShowTCGuards1 :: Types.TCGuards -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.TCGuards) ->
                 Types.$w$cshowsPrec16 0# w) -}
56a436ce47366ace40afb5bf26b6afb6
  $fShowTCGuards_$cshow :: Types.TCGuards -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.TCGuards) ->
                 case x of wild {
                   Types.TCNoGuards b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTCFunc6
                        (Types.$w$cshowsPrec14 11# b1 (GHC.Types.[] @ GHC.Types.Char))
                   Types.TCGuards b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTCFunc5
                        (GHC.Show.showList__
                           @ (Types.TCExpr, Types.TCExpr)
                           Types.$fShowTCFunc4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
56a436ce47366ace40afb5bf26b6afb6
  $fShowTCGuards_$cshowList :: [Types.TCGuards] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TCGuards
                   Types.$fShowTCGuards1) -}
56a436ce47366ace40afb5bf26b6afb6
  $fShowTCGuards_$cshowsPrec ::
    GHC.Types.Int -> Types.TCGuards -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.TCGuards) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec16 ww1 w1 }) -}
37b29aaac158f03681018e20b16bb37a
  $fShowTCore :: GHC.Show.Show Types.TCore
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TCore
                  Types.$fShowTCore_$cshowsPrec
                  Types.$fShowTCore_$cshow
                  Types.$fShowTCore_$cshowList -}
37b29aaac158f03681018e20b16bb37a
  $fShowTCore1 :: Types.TCore -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.TCore) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.TCore ww1 ->
                 Types.$w$cshowsPrec17 0# ww1 w1 }) -}
2a7ace059395b10118d893169ea5b1c8
  $fShowTCore2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TCore "#) -}
37b29aaac158f03681018e20b16bb37a
  $fShowTCore_$cshow :: Types.TCore -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TCore) ->
                 case x of wild { Types.TCore b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowTCore2)
                   (GHC.Show.showList__
                      @ Types.TCFunc
                      Types.$fShowTCFunc1
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
37b29aaac158f03681018e20b16bb37a
  $fShowTCore_$cshowList :: [Types.TCore] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TCore
                   Types.$fShowTCore1) -}
37b29aaac158f03681018e20b16bb37a
  $fShowTCore_$cshowsPrec ::
    GHC.Types.Int -> Types.TCore -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.TCore)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.TCore ww3 ->
                 Types.$w$cshowsPrec17 ww1 ww3 w2 } }) -}
2ca627f167c05972904f3acdfbba14a6
  $fShowTErr :: GHC.Show.Show Types.TErr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TErr
                  Types.$fShowTErr_$cshowsPrec
                  Types.$fShowTErr_$cshow
                  Types.$fShowTErr_$cshowList -}
2ca627f167c05972904f3acdfbba14a6
  $fShowTErr1 :: Types.TErr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.TErr) ->
                 case w of ww { Types.TErr ww1 ww2 ww3 ww4 ->
                 Types.$w$cshowsPrec18 0# ww1 ww2 ww3 ww4 }) -}
4eba75bc3dce869b053a9934867f31a6
  $fShowTErr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TErr "#) -}
2ca627f167c05972904f3acdfbba14a6
  $fShowTErr_$cshow :: Types.TErr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TErr) ->
                 Types.$fShowTErr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2ca627f167c05972904f3acdfbba14a6
  $fShowTErr_$cshowList :: [Types.TErr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.TErr Types.$fShowTErr1) -}
2ca627f167c05972904f3acdfbba14a6
  $fShowTErr_$cshowsPrec ::
    GHC.Types.Int -> Types.TErr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.TErr) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.TErr ww3 ww4 ww5 ww6 ->
                 Types.$w$cshowsPrec18 ww1 ww3 ww4 ww5 ww6 } }) -}
4608f54b75b9a86394bd173384a8f6bf
  $fShowTLog :: GHC.Show.Show Types.TLog
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TLog
                  Types.$fShowTLog_$cshowsPrec
                  Types.$fShowTLog_$cshow
                  Types.$fShowTLog_$cshowList -}
4608f54b75b9a86394bd173384a8f6bf
  $fShowTLog1 :: Types.TLog -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Types.TLog) -> Types.$w$cshowsPrec19 0# w) -}
2fb0858ca22cf830e4f3fe4cd80384fc
  $fShowTLog2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TLogDebug "#) -}
dd22211160981bb5d162606d861d8133
  $fShowTLog3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TLogErr "#) -}
e34f648b3d2120caf19f934867a2b8ed
  $fShowTLog4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TInterpretationStage"#) -}
2aab877f80979643253da2277cee98fe
  $fShowTLog5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TInitialStage"#) -}
7ecf0859e8ae71995ef59e4d6dcf03c0
  $fShowTLog6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TLog "#) -}
4608f54b75b9a86394bd173384a8f6bf
  $fShowTLog_$cshow :: Types.TLog -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TLog) ->
                 Types.$fShowTLog_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4608f54b75b9a86394bd173384a8f6bf
  $fShowTLog_$cshowList :: [Types.TLog] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Types.TLog Types.$fShowTLog1) -}
4608f54b75b9a86394bd173384a8f6bf
  $fShowTLog_$cshowsPrec ::
    GHC.Types.Int -> Types.TLog -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Types.TLog) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec19 ww1 w1 }) -}
2790536fe3b8b1cd1b284b55137862d3
  $fShowTStage :: GHC.Show.Show Types.TStage
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TStage
                  Types.$fShowTStage_$cshowsPrec
                  Types.$fShowTStage_$cshow
                  Types.$fShowTStage_$cshowList -}
2790536fe3b8b1cd1b284b55137862d3
  $fShowTStage1 :: Types.TStage -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Types.TStage) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.TInitialStage
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowTLog5)
                        eta
                   Types.TInterpretationStage
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowTLog4)
                        eta }) -}
2790536fe3b8b1cd1b284b55137862d3
  $fShowTStage_$cshow :: Types.TStage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TStage) ->
                 case x of wild {
                   Types.TInitialStage -> Types.$fShowTLog5
                   Types.TInterpretationStage -> Types.$fShowTLog4 }) -}
2790536fe3b8b1cd1b284b55137862d3
  $fShowTStage_$cshowList :: [Types.TStage] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TStage
                   Types.$fShowTStage1) -}
2790536fe3b8b1cd1b284b55137862d3
  $fShowTStage_$cshowsPrec ::
    GHC.Types.Int -> Types.TStage -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Types.TStage)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Types.TInitialStage
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowTLog5)
                        eta
                   Types.TInterpretationStage
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowTLog4)
                        eta }) -}
40f95c047818067e4f0b74424938b4b0
  $fShowTState :: GHC.Show.Show Types.TState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TState
                  Types.$fShowTState_$cshowsPrec
                  Types.$fShowTState_$cshow
                  Types.$fShowTState_$cshowList -}
40f95c047818067e4f0b74424938b4b0
  $fShowTState1 :: Types.TState -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Types.TState) (w1 :: GHC.Base.String) ->
                 case w of ww { Types.TState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                 Types.$w$cshowsPrec20
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   w1 }) -}
40f95c047818067e4f0b74424938b4b0
  $fShowTState_$cshow :: Types.TState -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U),1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TState) ->
                 Types.$fShowTState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
40f95c047818067e4f0b74424938b4b0
  $fShowTState_$cshowList :: [Types.TState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TState
                   Types.$fShowTState1) -}
40f95c047818067e4f0b74424938b4b0
  $fShowTState_$cshowsPrec ::
    GHC.Types.Int -> Types.TState -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U),1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.TState)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Types.TState ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ->
                 Types.$w$cshowsPrec20
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   w2 } }) -}
1dfec07a9669d8465c4d4a3b8c5275be
  $fShowTransitionType :: GHC.Show.Show Types.TransitionType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TransitionType
                  Types.$fShowTransitionType_$cshowsPrec
                  Types.$fShowTransitionType_$cshow
                  Types.$fShowTransitionType_$cshowList -}
1dfec07a9669d8465c4d4a3b8c5275be
  $fShowTransitionType1 :: Types.TransitionType -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowTransitionType_$cshowsPrec
                   Types.$fShowC3) -}
e82ced231496907b88952c2b3c9041cb
  $fShowTransitionType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FunctionTransition"#) -}
aa539ca5d5f87fcf8bf38350529b330e
  $fShowTransitionType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IdTransition"#) -}
f6779a408e83873beea4915a35a3db6d
  $fShowTransitionType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConsTransition "#) -}
ccab0d0114f13211d143e645c13f8e59
  $fShowTransitionType5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RestTransition"#) -}
ebaf415f006a7a4f5dc942307b2b985c
  $fShowTransitionType6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConsRTransition "#) -}
1dfec07a9669d8465c4d4a3b8c5275be
  $fShowTransitionType_$cshow ::
    Types.TransitionType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Types.TransitionType) ->
                 case x of wild {
                   Types.ConsRTransition b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTransitionType6
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Types.RestTransition -> Types.$fShowTransitionType5
                   Types.ConsTransition b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTransitionType4
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Types.IdTransition -> Types.$fShowTransitionType3
                   Types.FunctionTransition -> Types.$fShowTransitionType2 }) -}
1dfec07a9669d8465c4d4a3b8c5275be
  $fShowTransitionType_$cshowList ::
    [Types.TransitionType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TransitionType
                   Types.$fShowTransitionType1) -}
1dfec07a9669d8465c4d4a3b8c5275be
  $fShowTransitionType_$cshowsPrec ::
    GHC.Types.Int -> Types.TransitionType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Types.TransitionType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Types.ConsRTransition b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowTransitionType6
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTransitionType6
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }
                   Types.RestTransition
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTransitionType5 eta
                   Types.ConsTransition b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowTransitionType4
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTransitionType4
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }
                   Types.IdTransition
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTransitionType3 eta
                   Types.FunctionTransition
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTransitionType2
                        eta }) -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fShowTypeClassification :: GHC.Show.Show Types.TypeClassification
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.TypeClassification
                  Types.$fShowTypeClassification_$cshowsPrec
                  Types.$fShowTypeClassification_$cshow
                  Types.$fShowTypeClassification_$cshowList -}
da62af4ea1f8fb2b74c811a27475d670
  $fShowTypeClassification1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoRecursiveTypes"#) -}
cbce7c258a46800c48798de684c33011
  $fShowTypeClassification2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "OutputInputRecursive"#) -}
e8e4c72cf1674f0184ff9fd9520e37b8
  $fShowTypeClassification3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InputRecursive"#) -}
951a3e0db33205314c43268a9c29ad18
  $fShowTypeClassification4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OutputRecursive"#) -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fShowTypeClassification_$cshow ::
    Types.TypeClassification -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Types.TypeClassification) ->
                 Types.$fShowTypeClassification_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fShowTypeClassification_$cshowList ::
    [Types.TypeClassification] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.TypeClassification
                   Types.$w$cshowsPrec21) -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $fShowTypeClassification_$cshowsPrec ::
    GHC.Types.Int -> Types.TypeClassification -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Types.TypeClassification)
                   (w2 :: GHC.Base.String) ->
                 Types.$w$cshowsPrec21 w1 w2) -}
b87202e1c523a5483548f1aa8ee0044f
  $s$fEq(,) :: GHC.Classes.Eq ([GHC.Types.Char], Types.FType)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Types.FType)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ Types.FType
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     Types.$fEqFType)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ Types.FType
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     Types.$fEqFType) -}
8b58b9f3be6149fd802e0e7bbd25004a
  $s$fShow(,)8 ::
    ([GHC.Types.Char], [GHC.Types.Char])
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w3 :: ([GHC.Types.Char], [GHC.Types.Char]))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         ww1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows5
                               (GHC.Show.$fShow(,)_$sgo
                                  (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w4)
                                  (\ (eta1 :: GHC.Base.String) ->
                                   GHC.Show.shows_$cshowList1 ww2 eta1)
                                  (GHC.Types.[] @ GHC.Show.ShowS)))))) }) -}
a56dd35fa694e771ef1f5f0f3c0876ab
  $s$fShow(,)_$s$fShow(,)_$cshowList4 ::
    [([GHC.Types.Char], [GHC.Types.Char])] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [([GHC.Types.Char], [GHC.Types.Char])])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.shows22)
                   eta
                   eta1) -}
cb6a44bcada83de165f686893172200b
  $tc'AllInstancesUsed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   185113083776489865##
                   12421073616273789429##
                   Types.$trModule
                   Types.$tc'AllInstancesUsed1) -}
189366d45052f658b7c7fc1b7c4b1d4c
  $tc'AllInstancesUsed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AllInstancesUsed"#) -}
1b3e1df67b47e8051fc020d6562cb1e8
  $tc'ArityMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13623533411861512134##
                   16774893419498858297##
                   Types.$trModule
                   Types.$tc'ArityMismatch1) -}
50da517b47c923536ac409386aa919de
  $tc'ArityMismatch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArityMismatch"#) -}
af1527d2ac9e2e28556616812756b5fd
  $tc'BLOB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10733692854648996905##
                   11753405638268877622##
                   Types.$trModule
                   Types.$tc'BLOB1) -}
44d1baaa1c69db06a1a000d054a0e97d
  $tc'BLOB1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BLOB"#) -}
760b0e52bb8388e2ba7db7b6adaaa944
  $tc'BREAK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15729327498320833863##
                   17817216693959313250##
                   Types.$trModule
                   Types.$tc'BREAK1) -}
532efb7644a57a584d3a19b034709885
  $tc'BREAK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BREAK"#) -}
ef1cda66b2688727031bbfaa64cc5183
  $tc'Bit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15734231219836249305##
                   17425505175996776499##
                   Types.$trModule
                   Types.$tc'Bit1) -}
5628726abb334afb3a824ae230abf3f0
  $tc'Bit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bit"#) -}
c8236b3f1f1081f256986a01456f471d
  $tc'BitVec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10973459384449916059##
                   15670660673355164109##
                   Types.$trModule
                   Types.$tc'BitVec1) -}
8abc30f2560e4fc9d69a32294ec94ce4
  $tc'BitVec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BitVec"#) -}
5e093c13914c2bb2349e3100a82ab0a6
  $tc'C :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1256560020914671615##
                   12161983007268493015##
                   Types.$trModule
                   Types.$tc'C1) -}
775245f1dfc8648823bdc8f147f501f1
  $tc'C1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C"#) -}
41c37a681e6b0ba98f862ad65d3429b8
  $tc'CConstr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1363332149425074023##
                   3446832225489025248##
                   Types.$trModule
                   Types.$tc'CConstr1) -}
d54042fd7bb22cdc717de29b9a9b0c8e
  $tc'CConstr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CConstr"#) -}
a78643d5b8199a89862bbb81fcaf4d3d
  $tc'CFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   862435440238382765##
                   9756546961732665264##
                   Types.$trModule
                   Types.$tc'CFunc1) -}
5a74d97cdf21833f43d32bc9afe1e2c3
  $tc'CFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CFunc"#) -}
4863a5817976a5d8d01f8bf122b32b2b
  $tc'CGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16581751550804623182##
                   3537530340143972181##
                   Types.$trModule
                   Types.$tc'CGuards1) -}
324f8e6098598f041ec43122529a54eb
  $tc'CGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CGuards"#) -}
dc5d945d3c825dfce92f827e7ab96030
  $tc'CLEARV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1013579877353845511##
                   6323233538565938916##
                   Types.$trModule
                   Types.$tc'CLEARV1) -}
f5a2f0b3fd514d9c13c5896e95cdebd0
  $tc'CLEARV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CLEARV"#) -}
ee32e91c34beecbf0728722c58d0a98b
  $tc'CNoGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14744079717231186430##
                   1255442832055514738##
                   Types.$trModule
                   Types.$tc'CNoGuards1) -}
579ae4c7b679d4f33c9a5920dabe32d4
  $tc'CNoGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CNoGuards"#) -}
f6b3ea8176459537df79f653a72fb51c
  $tc'COND :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17192584036623127517##
                   3471554598067741032##
                   Types.$trModule
                   Types.$tc'COND1) -}
6560fce50346c8b21742bd161ba92b75
  $tc'COND1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COND"#) -}
a1e46e6b4c9318a14341a3f605dbaac4
  $tc'COPY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15131916524186774984##
                   6656859988713232830##
                   Types.$trModule
                   Types.$tc'COPY1) -}
70dcb79548086e6d7b7b6b44e4551a20
  $tc'COPY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COPY"#) -}
825bde26440035a76eb9025e4b0749a9
  $tc'COPYV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6163068365517452046##
                   3531754054069863204##
                   Types.$trModule
                   Types.$tc'COPYV1) -}
d15ccc09fad8c423110d2fda8e85a89b
  $tc'COPYV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COPYV"#) -}
797cabdbc7b1fc8fafad9a618cee4198
  $tc'CTAExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10576146249274982556##
                   3879654100585185626##
                   Types.$trModule
                   Types.$tc'CTAExpr1) -}
a2c467c4c43f80ac661121e88036c644
  $tc'CTAExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTAExpr"#) -}
b7023384321a06d50aec159b8b6ef77e
  $tc'CTApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9253168017731425073##
                   6461119538802471356##
                   Types.$trModule
                   Types.$tc'CTApp1) -}
2b8e5628466a4d0cbeba51bb9868cd1c
  $tc'CTApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTApp"#) -}
233a3e55b97ea0f88e112158ba0884a5
  $tc'CTArrow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4437818515738967413##
                   10838336681324161828##
                   Types.$trModule
                   Types.$tc'CTArrow1) -}
c5a9c09a8a6322f0366b28fbe1695f67
  $tc'CTArrow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CTArrow"#) -}
cb5d477565aba9b46672f6882a2e4afe
  $tc'CannotSynth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6272693693643992654##
                   769727349765195210##
                   Types.$trModule
                   Types.$tc'CannotSynth1) -}
0266f143c578af1ca643cf922796065f
  $tc'CannotSynth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CannotSynth"#) -}
86c044b641d942b01cc10646bc84c414
  $tc'CantMatchTypes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9599778011514572938##
                   2554471567964354709##
                   Types.$trModule
                   Types.$tc'CantMatchTypes1) -}
65d34dac4cb9a8ea3f33eda21284355f
  $tc'CantMatchTypes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CantMatchTypes"#) -}
15f5a00c435004adea96604fe2994849
  $tc'ComponentNotDone :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1583120644473170327##
                   11962113678599421263##
                   Types.$trModule
                   Types.$tc'ComponentNotDone1) -}
716ec22a1255e77976125c2b4e4e6325
  $tc'ComponentNotDone1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ComponentNotDone"#) -}
0c950094f23987f9ca7f0555fb3249af
  $tc'ConsRTransition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10044278722356843665##
                   12166110769636726081##
                   Types.$trModule
                   Types.$tc'ConsRTransition1) -}
b3d1ac197359d47eb71b9665b44a935b
  $tc'ConsRTransition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConsRTransition"#) -}
f816b31d9ee6ae1e7ccb12d95c206679
  $tc'ConsTransition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7194453058624847090##
                   282050973710644646##
                   Types.$trModule
                   Types.$tc'ConsTransition1) -}
5bb90866eb75b12f33056935afc3a5a0
  $tc'ConsTransition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConsTransition"#) -}
6aa9c932a9f9fc32b5ca018133242316
  $tc'ConstBinI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5168284009206445051##
                   11931277255851815315##
                   Types.$trModule
                   Types.$tc'ConstBinI1) -}
f2d2ade955ea6af8d8ec5c63c5a83750
  $tc'ConstBinI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConstBinI"#) -}
1f56a77c278c7273216aca8dad3a5448
  $tc'ConstDecI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7339588208429058798##
                   2746715207237952630##
                   Types.$trModule
                   Types.$tc'ConstDecI1) -}
f28ab64b8634ffdfc72be6ba80e8247e
  $tc'ConstDecI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConstDecI"#) -}
14fcb1296d238fbb6f4da2db39b04242
  $tc'ConstHexI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15982167038627693488##
                   3528437835200036124##
                   Types.$trModule
                   Types.$tc'ConstHexI1) -}
6bd7f84881abd9382a1a8749ca907ba2
  $tc'ConstHexI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConstHexI"#) -}
1ad752d2297a0183b5d7f83238365d34
  $tc'ConstStrI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14102364449187839495##
                   4797974698022045301##
                   Types.$trModule
                   Types.$tc'ConstStrI1) -}
cce04969f7b43b2417416915f325d3b0
  $tc'ConstStrI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConstStrI"#) -}
f08f485fe682e7ea9533800cdcc81b95
  $tc'ConstantsHaveNoInputs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17534970950575394837##
                   10883068263019973522##
                   Types.$trModule
                   Types.$tc'ConstantsHaveNoInputs1) -}
ffe313c7a2c23eed38c3066b49611bfc
  $tc'ConstantsHaveNoInputs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ConstantsHaveNoInputs"#) -}
da5b987a5a4bbef9915696baa72edc94
  $tc'Core :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4673404892326368560##
                   13398464669994786433##
                   Types.$trModule
                   Types.$tc'Core1) -}
c7fd32962fc7523c35d9f6e771571c7d
  $tc'Core1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Core"#) -}
9e1c79c06cd2bde93609484a986a23ab
  $tc'CouldntGetNextInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7315329571068514986##
                   15789793788391679648##
                   Types.$trModule
                   Types.$tc'CouldntGetNextInstance1) -}
bfc3b82f134e6b4605c486c313317260
  $tc'CouldntGetNextInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CouldntGetNextInstance"#) -}
e4b11ea89e370050a0b19d52efe31df9
  $tc'DESTROY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17101317119597651764##
                   17101241685878581640##
                   Types.$trModule
                   Types.$tc'DESTROY1) -}
e78ca6f34cf88d61a10f2b138a6d8bc0
  $tc'DESTROY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DESTROY"#) -}
5ad03efe8fd767cc96c51d5ccb290eb9
  $tc'DESTROYV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18071534145866764966##
                   4362410081720583692##
                   Types.$trModule
                   Types.$tc'DESTROYV1) -}
d68d2fa5f1e974fb912045661f72bf70
  $tc'DESTROYV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DESTROYV"#) -}
65fb26975d79e3e773188cdd3ad0aad1
  $tc'ELSE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17276222599432292784##
                   4542738499528276##
                   Types.$trModule
                   Types.$tc'ELSE1) -}
71e9344ab9d665da673db56c504c1b4d
  $tc'ELSE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ELSE"#) -}
999f0080f8451ea7130053904849d367
  $tc'ELSEIF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8829788580064045674##
                   17233400742200089431##
                   Types.$trModule
                   Types.$tc'ELSEIF1) -}
f72641afdca62648efab44f669e18bf6
  $tc'ELSEIF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ELSEIF"#) -}
18866ae14705faf61928c17727a435ab
  $tc'ErrConstantAsFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10450840687651380938##
                   2044685577282987947##
                   Types.$trModule
                   Types.$tc'ErrConstantAsFunction1) -}
ef5f4a97572bd9976e24487fce985690
  $tc'ErrConstantAsFunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ErrConstantAsFunction"#) -}
0b0d6c0977ad074d4068e67a74fbcf42
  $tc'ExpressionConstructionErr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13392713853182723450##
                   10700166815909735996##
                   Types.$trModule
                   Types.$tc'ExpressionConstructionErr1) -}
3d5d2c1078ef670e2e5aee69106565ae
  $tc'ExpressionConstructionErr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ExpressionConstructionErr"#) -}
57983a4fa830655c4abab9953f58f98b
  $tc'F :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16404121397627579352##
                   18396245798048322416##
                   Types.$trModule
                   Types.$tc'F1) -}
75d029c8f5fd05adca6ad710bd9992ab
  $tc'F1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'F"#) -}
fa240dd7a5da3a78619c73638163701c
  $tc'FAExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   94980764301160612##
                   4537765331037026119##
                   Types.$trModule
                   Types.$tc'FAExpr1) -}
81aaacd56687f4e2892c261acdb147bd
  $tc'FAExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FAExpr"#) -}
fe40a763977ce262c985a78e373304fe
  $tc'FApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13936854572638529901##
                   5829502164800244272##
                   Types.$trModule
                   Types.$tc'FApp1) -}
48492129531462e85f5d78cdecef7e14
  $tc'FApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FApp"#) -}
81659c48c0e7912a0c9ad2775dc9942c
  $tc'FBin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12884703878119337385##
                   7222269625280618141##
                   Types.$trModule
                   Types.$tc'FBin1) -}
025c73159452da2bbd19a06b0ad29c17
  $tc'FBin1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FBin"#) -}
2b6cedf6af9ffda54d1e51b57288671b
  $tc'FCons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6244947528067100997##
                   7041559099282236890##
                   Types.$trModule
                   Types.$tc'FCons1) -}
59bd8b04e2a05c4a5bb3e077cdea8c77
  $tc'FCons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FCons"#) -}
089f9648afeb9936b49867032aaabc2f
  $tc'FDec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3455747299705008351##
                   10912748764512339888##
                   Types.$trModule
                   Types.$tc'FDec1) -}
54698e664a4d4d5fd07e8c2b205d7238
  $tc'FDec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FDec"#) -}
bc370e984e3887c999b1772d7c200551
  $tc'FForeverWait :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7626034959930319948##
                   13917692694981031961##
                   Types.$trModule
                   Types.$tc'FForeverWait1) -}
0120e0abc1ad23de733cf5810cce75b1
  $tc'FForeverWait1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FForeverWait"#) -}
73ece61cec168a5bff08fffa06c28651
  $tc'FGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9882026896643620731##
                   3061349425515970301##
                   Types.$trModule
                   Types.$tc'FGuards1) -}
fd385c93108d42a6312056ff22b97680
  $tc'FGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FGuards"#) -}
ae1bff24d9131eb0072c561ae9dd550f
  $tc'FHex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3884896701983731116##
                   12501256165279379613##
                   Types.$trModule
                   Types.$tc'FHex1) -}
7164ec394dec85d912c1498706cd8c69
  $tc'FHex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FHex"#) -}
328e56d624edf63d52e79946264cfdfd
  $tc'FVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7460788897946836470##
                   14509457470473497090##
                   Types.$trModule
                   Types.$tc'FVar1) -}
cc620610607c85b933757794f17e3b72
  $tc'FVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FVar"#) -}
55f4a429bf759acaec63e45f60b31aa8
  $tc'FifoI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11360365204915252676##
                   8794150595802998521##
                   Types.$trModule
                   Types.$tc'FifoI1) -}
375980af6edd319e4036241820ee0aa2
  $tc'FifoI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FifoI"#) -}
fc44d27fc6b53afbf6cf91d7b7598a04
  $tc'ForkI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10319743788997653548##
                   10163660610807953796##
                   Types.$trModule
                   Types.$tc'ForkI1) -}
3aa8e0b9bb934ab4c071a512205c6279
  $tc'ForkI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ForkI"#) -}
f2d6e2efa8c470a0caaea82acd83998f
  $tc'Function :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1026075133891894513##
                   2850608090119935355##
                   Types.$trModule
                   Types.$tc'Function1) -}
909a0ecb4712fda2aeb99b279b7ddc7a
  $tc'Function1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Function"#) -}
d6660e3f6c385529a43a33eb6c96f142
  $tc'FunctionNotDeclared :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11102082967084285350##
                   9600008553092539074##
                   Types.$trModule
                   Types.$tc'FunctionNotDeclared1) -}
561424b1ec8e98fa82cc75e86afb6719
  $tc'FunctionNotDeclared1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FunctionNotDeclared"#) -}
c0194ec4da00d3f2ea82d23e727766ee
  $tc'FunctionTransition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7395678216288327182##
                   6260530910213715887##
                   Types.$trModule
                   Types.$tc'FunctionTransition1) -}
f85d3b0afe5dcccac56a86e2cd17608d
  $tc'FunctionTransition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FunctionTransition"#) -}
62cbd8787566db2df2f5cb913d3afcc0
  $tc'GET :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10430010637834856701##
                   3556368052850352998##
                   Types.$trModule
                   Types.$tc'GET1) -}
83d63315659b4441c9cf456f3c94640d
  $tc'GET1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GET"#) -}
dc518642da91e6f151eab47aadc0eb58
  $tc'GETINPUT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12329314882843133048##
                   212071829923232183##
                   Types.$trModule
                   Types.$tc'GETINPUT1) -}
d9041d68c1483233e06a1b776056dd5a
  $tc'GETINPUT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GETINPUT"#) -}
9df0bd4c50c283ccd32a7a080ec244c4
  $tc'GETSTREAMSAFE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12376588807667263316##
                   8763997426002560509##
                   Types.$trModule
                   Types.$tc'GETSTREAMSAFE1) -}
4aac664517c14270a2df5d97aa715697
  $tc'GETSTREAMSAFE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GETSTREAMSAFE"#) -}
006857b77968296a09b510a3d442a60f
  $tc'GETSTREAMV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15193881082712621479##
                   1459473154844999651##
                   Types.$trModule
                   Types.$tc'GETSTREAMV1) -}
8f1a9b8efa9633910b55fc134afac7c6
  $tc'GETSTREAMV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GETSTREAMV"#) -}
0de5c8d31a9d74fe23b04fac8d4be4e9
  $tc'I :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17647753056136492063##
                   15088779306550176260##
                   Types.$trModule
                   Types.$tc'I1) -}
c8d14530804e27052f0581896bc7baaa
  $tc'I1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'I"#) -}
597c24c80d5495f0789fe8fdd62ff5d1
  $tc'IF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14884108705867754158##
                   14659676219795312474##
                   Types.$trModule
                   Types.$tc'IF1) -}
2a987d053310e12d26d8bf205db0c42f
  $tc'IF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IF"#) -}
f7fdab5aff18dcf6fbb503da1061a060
  $tc'IdTransition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11618864404493222290##
                   3507680139106009524##
                   Types.$trModule
                   Types.$tc'IdTransition1) -}
f4e4bf2f12f07ca08b05d550e4f23308
  $tc'IdTransition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IdTransition"#) -}
02707614dade507bcde586c0216d3288
  $tc'ImpossibleConnection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4007536202971137362##
                   17138645068654916324##
                   Types.$trModule
                   Types.$tc'ImpossibleConnection1) -}
10fea400838c78b429abab11300c70d2
  $tc'ImpossibleConnection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ImpossibleConnection"#) -}
1264bd83006ad786ccb1fbb9f6c872ab
  $tc'InputRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   891199307690868901##
                   2863905577509723856##
                   Types.$trModule
                   Types.$tc'InputRecursive1) -}
f12da0ba93ce9559ff8166eb493bcd9a
  $tc'InputRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InputRecursive"#) -}
e92a89211fa06a6b45ce98c1f934b884
  $tc'LOOP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4742425460772312205##
                   16678657867004691085##
                   Types.$trModule
                   Types.$tc'LOOP1) -}
b282fc3ac81b84e08d7318e1a765e99a
  $tc'LOOP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LOOP"#) -}
718a30795e95b924caac0ba6e04774b5
  $tc'LeftRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4192203250221641484##
                   2404616985482555154##
                   Types.$trModule
                   Types.$tc'LeftRecursive1) -}
e22ff42f1fb416936620dc385737c8d8
  $tc'LeftRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LeftRecursive"#) -}
4cd9d3e01ebd142e7da56cfb82c0ba14
  $tc'MAKEV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8738336626049837923##
                   11507001427310992233##
                   Types.$trModule
                   Types.$tc'MAKEV1) -}
6f034a474a0adde6343a4a62aa460170
  $tc'MAKEV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MAKEV"#) -}
bfcd7cf80b3e1f310da0bb4231011c0a
  $tc'ModifyUnexistingInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7047376215077650095##
                   12606878535542377540##
                   Types.$trModule
                   Types.$tc'ModifyUnexistingInstance1) -}
d7b4f92cbdd5d12eb121644d472a034e
  $tc'ModifyUnexistingInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ModifyUnexistingInstance"#) -}
5da96b24cde778f1ec1d673ba0a36e59
  $tc'MultipleRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5379650979298531200##
                   6872024076482717867##
                   Types.$trModule
                   Types.$tc'MultipleRecursive1) -}
acd8d6c0a114c963d451cb642280a7d9
  $tc'MultipleRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MultipleRecursive"#) -}
9494fe46baf2fabdea335d9452e66431
  $tc'NameId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17996829644129039631##
                   8733544596149516993##
                   Types.$trModule
                   Types.$tc'NameId1) -}
70005c7c9cac26806ffe9e5e22769bcf
  $tc'NameId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NameId"#) -}
e6d05f5bcb86eb9e5545ef6e417ab39a
  $tc'Nat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17404569641718532670##
                   9860212373803130861##
                   Types.$trModule
                   Types.$tc'Nat1) -}
8096a63d6033c4808e5b0487e1783d7f
  $tc'Nat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nat"#) -}
c1cfa43681b8a937adb344b01a798216
  $tc'NoConnectionsForComponent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1062562750659469145##
                   10547317039359120700##
                   Types.$trModule
                   Types.$tc'NoConnectionsForComponent1) -}
a7cfb9c0e58b62b5b22ba8c620989341
  $tc'NoConnectionsForComponent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoConnectionsForComponent"#) -}
78cdd9597d33cc5833599856484fed42
  $tc'NoFGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18197361423743942435##
                   4186668495364095621##
                   Types.$trModule
                   Types.$tc'NoFGuards1) -}
48d6c255b154a6c53c836ff4609daf3b
  $tc'NoFGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoFGuards"#) -}
6ed2d2d355d4e6fbf5a5c0aee13c68b6
  $tc'NoRecursiveTypes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10692700001280677493##
                   6477361991015791565##
                   Types.$trModule
                   Types.$tc'NoRecursiveTypes1) -}
239ad785bbac72b2836407493a84a4f0
  $tc'NoRecursiveTypes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoRecursiveTypes"#) -}
a7b8d82ab184f414a4a44a535c7872f6
  $tc'NonRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12043761650954370164##
                   10707416918789527647##
                   Types.$trModule
                   Types.$tc'NonRecursive1) -}
e06782b5553d30427d9e2546ae6236ff
  $tc'NonRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NonRecursive"#) -}
4cdfeeafb3b7f3a8e9d9af05e7af8110
  $tc'NonTerminatingRecursion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14250165870156026046##
                   6367801613464238515##
                   Types.$trModule
                   Types.$tc'NonTerminatingRecursion1) -}
2926ca5abad72d77d701b3140a3190fb
  $tc'NonTerminatingRecursion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NonTerminatingRecursion"#) -}
6fe72ee68deae2ac58ca35d37994fb5b
  $tc'OutputInputRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10603744602690256472##
                   4245175296766801716##
                   Types.$trModule
                   Types.$tc'OutputInputRecursive1) -}
38396bfb4119821e4bde1686db7dc083
  $tc'OutputInputRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OutputInputRecursive"#) -}
e60816666eb6b18b79b8d04492a07f8f
  $tc'OutputRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11669553838320970724##
                   16260109864296513895##
                   Types.$trModule
                   Types.$tc'OutputRecursive1) -}
898a1f08ff380ec1f6a6b3a976ed0842
  $tc'OutputRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OutputRecursive"#) -}
9eced677f7cc645d5e33b96d0f44069e
  $tc'PCOPY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15326376517500808281##
                   13992301150306994871##
                   Types.$trModule
                   Types.$tc'PCOPY1) -}
d4c17eed1df5da658de4ed6b0216c973
  $tc'PCOPY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PCOPY"#) -}
4f5230231d6e159ccb4ba82cceab4cbf
  $tc'PUT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8885306462070856171##
                   1148958455461371388##
                   Types.$trModule
                   Types.$tc'PUT1) -}
1c32d5b0c7edd30a752d078110167dac
  $tc'PUT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUT"#) -}
ac72750387d0f4f50f9efdefae5b7d83
  $tc'PUTOUTPUT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16065488148404703937##
                   1403699906084241841##
                   Types.$trModule
                   Types.$tc'PUTOUTPUT1) -}
158bd52044ab1f35eb69b56879998bb7
  $tc'PUTOUTPUT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUTOUTPUT"#) -}
bf50fa6c0d8cd929fbfd3c385348d115
  $tc'PUTOUTPUTSTREAM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1085761077425772566##
                   9522240283204135584##
                   Types.$trModule
                   Types.$tc'PUTOUTPUTSTREAM1) -}
340b92df8dfce27f17b536614c948830
  $tc'PUTOUTPUTSTREAM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUTOUTPUTSTREAM"#) -}
26e8527bd71b6f9cdf8a9c1b5ac38ad0
  $tc'PUTOUTPUTSTREAMV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13484955472114138173##
                   10959796095479284103##
                   Types.$trModule
                   Types.$tc'PUTOUTPUTSTREAMV1) -}
c071b8e5fa4d903fb58eeba3f664d4dd
  $tc'PUTOUTPUTSTREAMV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUTOUTPUTSTREAMV"#) -}
096aff57e645e27d3df047bbdf83d715
  $tc'PUTSTATE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11214838790651625818##
                   3657266721980620502##
                   Types.$trModule
                   Types.$tc'PUTSTATE1) -}
ef6db5e3d49f10802c51dd8c9e4e30de
  $tc'PUTSTATE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUTSTATE"#) -}
3d380efec6120cd5b0f4c241cd75e683
  $tc'PUTSTREAM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11627934029690778915##
                   1906066328448342177##
                   Types.$trModule
                   Types.$tc'PUTSTREAM1) -}
df6ff992589dd5b7f59fc2be8b4c5aea
  $tc'PUTSTREAM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUTSTREAM"#) -}
4e13505803c7182bf02c62b68fd62129
  $tc'PUTV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2730493428198992665##
                   4554099078635434484##
                   Types.$trModule
                   Types.$tc'PUTV1) -}
9bc3b860905e1d5b7b980a81c850154f
  $tc'PUTV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PUTV"#) -}
db6f7c88bf03c8934ff01b3aaaa2a471
  $tc'RESTV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   907504377429183226##
                   1532845470141555066##
                   Types.$trModule
                   Types.$tc'RESTV1) -}
0c12bdca78342c72e2d40224f67915f3
  $tc'RESTV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RESTV"#) -}
0d487ea90dc05f35fd4478f4b6dfd8f0
  $tc'RecursionWithoutCondition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4178292796285003262##
                   11846813154972761348##
                   Types.$trModule
                   Types.$tc'RecursionWithoutCondition1) -}
d08c9731d6ca7122f317fc21a49c04e2
  $tc'RecursionWithoutCondition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RecursionWithoutCondition"#) -}
bdafb67d877d372851b4145d2a06d044
  $tc'RestTransition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17880889350278161676##
                   5153345908243568924##
                   Types.$trModule
                   Types.$tc'RestTransition1) -}
968a051641cafcbd6286d6ac6bedb2ad
  $tc'RestTransition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RestTransition"#) -}
fdb39942cf58dbd1d96dd3daed777995
  $tc'RightRecursive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10694909611682416668##
                   11173737489829224919##
                   Types.$trModule
                   Types.$tc'RightRecursive1) -}
689f716dc9e53f4ad37dc5151067ae84
  $tc'RightRecursive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RightRecursive"#) -}
c6bb044e04f3b90e9c4483c747359ea8
  $tc'SAVE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17046467521543278113##
                   16067655994070237453##
                   Types.$trModule
                   Types.$tc'SAVE1) -}
76266b85e36f22d86d9fa39c408a2009
  $tc'SAVE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SAVE"#) -}
b0e77b1049d1de3d183b9e37c22e1892
  $tc'SAVEV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17528302863911419372##
                   13015677972436461058##
                   Types.$trModule
                   Types.$tc'SAVEV1) -}
dc341ca2a643f12c5efcfb40ed02bcb1
  $tc'SAVEV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SAVEV"#) -}
e9af80f462e6ed6f4913fbf4eb4fd984
  $tc'SWITCH :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18150045755482617216##
                   1265581473979427628##
                   Types.$trModule
                   Types.$tc'SWITCH1) -}
dee354b3de1ce2f2689be4b7f8420d3a
  $tc'SWITCH1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SWITCH"#) -}
f862e7ff925eaa645bca497ea1183360
  $tc'SpecialF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3321817884290160613##
                   7105871409151044853##
                   Types.$trModule
                   Types.$tc'SpecialF1) -}
54f579902d0b7637576fb1606edc6081
  $tc'SpecialF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SpecialF"#) -}
e09648603325282d6fb5c02371bec9ac
  $tc'SpecialI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17590061257103040##
                   13510412846613307519##
                   Types.$trModule
                   Types.$tc'SpecialI1) -}
06648e4933a51eb61285233f958d84c9
  $tc'SpecialI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SpecialI"#) -}
56fd98bee6ef7ad8493b2ef2416fb552
  $tc'Stream :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10359295598657366555##
                   5093618842874447661##
                   Types.$trModule
                   Types.$tc'Stream1) -}
73eab4541d9c3c964237b92bf8c58c88
  $tc'Stream1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Stream"#) -}
7a395f539139afd64892c7a9a4120056
  $tc'TCAExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5817359047047317254##
                   2815282821391482257##
                   Types.$trModule
                   Types.$tc'TCAExpr1) -}
7238f535a506deb4787004372e4b99af
  $tc'TCAExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TCAExpr"#) -}
a21b4aca8b874605c3b5b2b1996dfee4
  $tc'TCApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2687886105565376628##
                   3762579918149017145##
                   Types.$trModule
                   Types.$tc'TCApp1) -}
194e7670a29a50fd2aea5fdb682f1f11
  $tc'TCApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TCApp"#) -}
75bfc4f1b136f1e5561cd1e15c5c628f
  $tc'TCFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13339459964076759043##
                   4219483595622422293##
                   Types.$trModule
                   Types.$tc'TCFunc1) -}
f7793d64c9830753a34e692a90705610
  $tc'TCFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TCFunc"#) -}
288f62bd531a1e1b213e575c7792fad5
  $tc'TCGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18061953535598313763##
                   3865126863924157417##
                   Types.$trModule
                   Types.$tc'TCGuards1) -}
03d0af513611306a5736ede9f7508196
  $tc'TCGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TCGuards"#) -}
08d7d9b1dca3f3fc0236f5500e65cbef
  $tc'TCNoGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   699975566162544850##
                   17526110310499283646##
                   Types.$trModule
                   Types.$tc'TCNoGuards1) -}
e2b936a3d940dae3659a61a91f5734f7
  $tc'TCNoGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TCNoGuards"#) -}
7ab72b9dcf89f52adcefb5c65665a4b3
  $tc'TCore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   926054784799557856##
                   1206113220632950840##
                   Types.$trModule
                   Types.$tc'TCore1) -}
aa57d0ce77150a6504f4389f8d2f8bf1
  $tc'TCore1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TCore"#) -}
e918744f437a220b1738c01730d00f7e
  $tc'TErr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1389391787466616774##
                   777555720279542601##
                   Types.$trModule
                   Types.$tc'TErr1) -}
af07d9bf7f1cb9a247541f1615b17727
  $tc'TErr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TErr"#) -}
99a0561a34a6133c49bb5c82400570d4
  $tc'TInitialStage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6653994703807818564##
                   1084710326901916897##
                   Types.$trModule
                   Types.$tc'TInitialStage1) -}
3528835e69dc7b38f3fd6a7cf3cd5f04
  $tc'TInitialStage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TInitialStage"#) -}
d0a851064a9f1ef71c820651c8a76273
  $tc'TInterpretationStage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13727941324327068656##
                   12100371876879245021##
                   Types.$trModule
                   Types.$tc'TInterpretationStage1) -}
46fe9d63f8c2138785a014b0efa99745
  $tc'TInterpretationStage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TInterpretationStage"#) -}
c90720a63e575cea2a01af6b12046848
  $tc'TLog :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4366759331661680049##
                   11006063343552189328##
                   Types.$trModule
                   Types.$tc'TLog1) -}
5acd28bc1ca287e5bff9ce7f991f060d
  $tc'TLog1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TLog"#) -}
6cc6c8298a97b1b164c9e1d40f766cf1
  $tc'TLogDebug :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14866453923297193077##
                   1495114628579813238##
                   Types.$trModule
                   Types.$tc'TLogDebug1) -}
d5b2695cd97626de9ec621a475f9542c
  $tc'TLogDebug1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TLogDebug"#) -}
043a5a9a829df61a5cb63dd890edc213
  $tc'TLogErr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6732891129666846940##
                   6385602601191520381##
                   Types.$trModule
                   Types.$tc'TLogErr1) -}
7efe8a9a395f01c72be11143ff63ca3c
  $tc'TLogErr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TLogErr"#) -}
8e8b43d64ce05cc4e273cc1c5487f847
  $tc'TState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17235141754212644006##
                   4091554086534109006##
                   Types.$trModule
                   Types.$tc'TState1) -}
215754f159acf0443cc799d35f52f78b
  $tc'TState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TState"#) -}
64359525b3b50e6ffeb9e4fca431f91a
  $tc'TypeNotPermitted :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7676969039335242730##
                   900126825976190759##
                   Types.$trModule
                   Types.$tc'TypeNotPermitted1) -}
5b65140ce0ae0cb332a9279c761b2304
  $tc'TypeNotPermitted1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeNotPermitted"#) -}
9e67f3b0a66333d7aa419f772f224dfc
  $tc'UniqueInstanceNotFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16112410805074914821##
                   6174975761757929056##
                   Types.$trModule
                   Types.$tc'UniqueInstanceNotFound1) -}
2a262c7abcf1c0c6825d946a1bcfd72a
  $tc'UniqueInstanceNotFound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UniqueInstanceNotFound"#) -}
1bc27954651c320455cbe8eb3e40e9b0
  $tc'VariableNotInScope :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   570253768084999909##
                   3965256919944207176##
                   Types.$trModule
                   Types.$tc'VariableNotInScope1) -}
9ed7fdf439e318332a9b8fa659cf3f4b
  $tc'VariableNotInScope1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VariableNotInScope"#) -}
52a3a9f2175c8796ce4347c8fa5da73b
  $tc'WrongInstanceNumberInput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3763853394299569513##
                   4272718707036272306##
                   Types.$trModule
                   Types.$tc'WrongInstanceNumberInput1) -}
cfa9fa58f7073bd4fda0bb5f21f808ab
  $tc'WrongInstanceNumberInput1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WrongInstanceNumberInput"#) -}
7db1c6c66faaad727ab89fc3a32ace92
  $tcC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12668018596269720885##
                   13463660015779905527##
                   Types.$trModule
                   Types.$tcC1) -}
597d23120222b2dd333f9d81c895bffa
  $tcC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "C"#) -}
8abedf045c4e13624a756d247a9e637c
  $tcCConstr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5849332820990697468##
                   16436341161024466704##
                   Types.$trModule
                   Types.$tcCConstr1) -}
d648b2a1a8d0a425cebc3263bf495593
  $tcCConstr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CConstr"#) -}
298492dd020f9c29c666eff552c9296a
  $tcCFType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4631659202908864139##
                   12020226011874868021##
                   Types.$trModule
                   Types.$tcCFType1) -}
f1c33aff23ed87d2d651569478ff06cc
  $tcCFType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CFType"#) -}
f383250a61726646780893665db40299
  $tcCFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12307309395259486910##
                   16255599219200677893##
                   Types.$trModule
                   Types.$tcCFunc1) -}
71ee8698da33ffd7e3ce57e8d3e20cd5
  $tcCFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CFunc"#) -}
77354718435223d106468edc8913d194
  $tcCGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1786839164781254192##
                   685615705311279974##
                   Types.$trModule
                   Types.$tcCGuards1) -}
281a934a91ffc291f438fa2a18512614
  $tcCGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CGuards"#) -}
143d585b8fc44f1196cb3e35457ff027
  $tcCProcUnit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6401076809499264832##
                   5731108055914369296##
                   Types.$trModule
                   Types.$tcCProcUnit1) -}
fd12b8db4f4166e93005837b9ff03292
  $tcCProcUnit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CProcUnit"#) -}
cb2a1a7bd109644074543ee8a4faf593
  $tcCore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11809800487896083214##
                   5431099633231743845##
                   Types.$trModule
                   Types.$tcCore1) -}
416cb673aa0636af84652b29c08d8555
  $tcCore1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Core"#) -}
5990b953eb15a5c9783b65992717551d
  $tcErrType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13816729911196503018##
                   16198730645276232205##
                   Types.$trModule
                   Types.$tcErrType1) -}
edb5d1db7214beea2c4e6c4197365a5c
  $tcErrType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ErrType"#) -}
47293093181d6a24f0ba954887fe8687
  $tcF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10100361549022006197##
                   15291249935463159072##
                   Types.$trModule
                   Types.$tcF1) -}
c3d495e9e9de7db735ef978d5e35c8f8
  $tcF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "F"#) -}
1e513a3d02b516ba84534348d43ec37f
  $tcFCons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2544818185117225799##
                   14548223437683425027##
                   Types.$trModule
                   Types.$tcFCons1) -}
56a5694d2bfb14feef8de22b6cc6127c
  $tcFCons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FCons"#) -}
9d1bea7badbf54b3461bea3befb57b78
  $tcFExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15061820823960927104##
                   7771676406967562301##
                   Types.$trModule
                   Types.$tcFExpr1) -}
e48596669a89ef04d51fd5a3ae441bfe
  $tcFExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FExpr"#) -}
d3b11ae14e807c9004c3623dfc6c4371
  $tcFGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7157203337890440562##
                   1568402792454413008##
                   Types.$trModule
                   Types.$tcFGuards1) -}
1dd4404a4b6392dfd8012a040f64d1b1
  $tcFGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FGuards"#) -}
25b16c3ff29952e6966d98615ef41235
  $tcFType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10571390605532101731##
                   12381836943764301921##
                   Types.$trModule
                   Types.$tcFType1) -}
7a8e8410fea200dc8c436e3bde91fbbc
  $tcFType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FType"#) -}
0946087e8505f8603565aa73f486c5f3
  $tcFVarCons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5074246436206628614##
                   6950789830763554328##
                   Types.$trModule
                   Types.$tcFVarCons1) -}
8152201e28e9827d797236ba711debb3
  $tcFVarCons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FVarCons"#) -}
31daa70b03d524b94eb46b2b2895bb72
  $tcI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2869404203838215875##
                   10815497485020239464##
                   Types.$trModule
                   Types.$tcI1) -}
b64d9ffc4461c2fa993a1690610e2910
  $tcI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "I"#) -}
c7ed8fc4754b2cc3a23320f509b22ebe
  $tcNameId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10377221209992942636##
                   3123113306566414449##
                   Types.$trModule
                   Types.$tcNameId1) -}
889f0485cbe5d769995c10f9661ce2da
  $tcNameId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NameId"#) -}
f03c08453607a62689e4131784180fb6
  $tcRecursionClassification :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3349997163266489403##
                   16784748697605011871##
                   Types.$trModule
                   Types.$tcRecursionClassification1) -}
683a28fe1d425845f510752a2e0fd921
  $tcRecursionClassification1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RecursionClassification"#) -}
57d89b62404c5983ae7b5d1218517864
  $tcTCExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6734562501588015766##
                   17696327369414672774##
                   Types.$trModule
                   Types.$tcTCExpr1) -}
403e3218ee1c618fc4ccefd8ba2d4647
  $tcTCExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TCExpr"#) -}
223abb3d7b296159bd51a2a04cc2b13a
  $tcTCFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17393330724675254360##
                   346123765382748733##
                   Types.$trModule
                   Types.$tcTCFunc1) -}
aa3abc73c786f6ebcfb1208387c99394
  $tcTCFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TCFunc"#) -}
6ddc7dd5b136385ebf80d14992b789d9
  $tcTCGuards :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17889743142610973514##
                   13386639186971176895##
                   Types.$trModule
                   Types.$tcTCGuards1) -}
ce3a643610a46f0b7ea07dbaa1065a9e
  $tcTCGuards1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TCGuards"#) -}
73693c0ea6a24e419797ba6bb06fffee
  $tcTCore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17626906277137818301##
                   546336807994666137##
                   Types.$trModule
                   Types.$tcTCore1) -}
5e4ecf81e0a5255d4e3ac1b649998ba1
  $tcTCore1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TCore"#) -}
f8c12262e3d78c08bb30c24db113370a
  $tcTErr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17357508893860698221##
                   13668882657745133777##
                   Types.$trModule
                   Types.$tcTErr1) -}
7d963f133cabfd3ee4f1eb9a6bb5a38b
  $tcTErr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TErr"#) -}
492956373c16ee16013234b597e72838
  $tcTLog :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10262734601239513425##
                   11259754514535075223##
                   Types.$trModule
                   Types.$tcTLog1) -}
2ea4314146b7719c280536278f9bcfef
  $tcTLog1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TLog"#) -}
93e8e67120dc0bbf33995754cb3cb84a
  $tcTStage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7948150945234316952##
                   17617310920128584842##
                   Types.$trModule
                   Types.$tcTStage1) -}
bb3d34db73d77869568cca5f88020e91
  $tcTStage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TStage"#) -}
404c1e23cbc39c0bd7a8ab9dac2a364f
  $tcTState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9738927376111774163##
                   8303339339926378854##
                   Types.$trModule
                   Types.$tcTState1) -}
21fb1eaf5b133760d325e9711edbea66
  $tcTState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TState"#) -}
a49a00a955702fc2de35af567359f10e
  $tcTransitionType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7246057537848716323##
                   7060656412775149512##
                   Types.$trModule
                   Types.$tcTransitionType1) -}
24e89c83beb7cb94de3e38b53abcca70
  $tcTransitionType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TransitionType"#) -}
cd9b76d1ea1204fa5661a7ae8df0ebd0
  $tcTypeClassification :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2599194958992897316##
                   831471849182185764##
                   Types.$trModule
                   Types.$tcTypeClassification1) -}
638fb4d315587ea290fc89e2afbdaac0
  $tcTypeClassification1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TypeClassification"#) -}
cf41ec5245b38fec25ade77e1de5d96f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Types.$trModule2 Types.$trModule1) -}
8113b2e843a820f673f8e1e5f1bfc118
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Types"#) -}
ded770f35d30f105f99b90ce19520f4b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HaskellCircuits-0.1.0.0-3mIW93ol3alH6nhlDJ7Hzo"#) -}
f7e78ee400b80584c4f2c7b6211b1270
  $w$c/= ::
    Types.Name -> Types.Id -> Types.Name -> Types.Id -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Types.Name)
                   (ww1 :: Types.Id)
                   (ww2 :: Types.Name)
                   (ww3 :: Types.Id) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
2678e85166abd18c296a555f34a487ee
  $w$c== ::
    Types.Name -> Types.Id -> Types.Name -> Types.Id -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Types.Name)
                   (ww1 :: Types.Id)
                   (ww2 :: Types.Name)
                   (ww3 :: Types.Id) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqInt ww1 ww3 }) -}
6fffd515eeba524ad35dc89d277742e0
  $w$c==1 ::
    Lexer.Token
    -> [(Lexer.LToken, Types.CFType)]
    -> Types.TCGuards
    -> Types.CFType
    -> Lexer.Token
    -> [(Lexer.LToken, Types.CFType)]
    -> Types.TCGuards
    -> Types.CFType
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Lexer.Token)
                   (ww1 :: [(Lexer.LToken, Types.CFType)])
                   (ww2 :: Types.TCGuards)
                   (ww3 :: Types.CFType)
                   (ww4 :: Lexer.Token)
                   (ww5 :: [(Lexer.LToken, Types.CFType)])
                   (ww6 :: Types.TCGuards)
                   (ww7 :: Types.CFType) ->
                 case Lexer.$fEqToken_$c== ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Lexer.LToken, Types.CFType)
                             Types.$fEqTCFunc_$s$fEq(,)1
                             ww1
                             ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case Types.$fEqTCFunc_$c==1 ww2 ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Types.$fEqCFType_$c== ww3 ww7 } } }) -}
38e9754db93a01ccd992c00dd2e8f901
  $w$c==2 ::
    Types.ErrType
    -> GHC.Base.Maybe Types.WhereMsg
    -> Types.Msg
    -> Lexer.SrcLoc
    -> Types.ErrType
    -> GHC.Base.Maybe Types.WhereMsg
    -> Types.Msg
    -> Lexer.SrcLoc
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Types.ErrType)
                   (ww1 :: GHC.Base.Maybe Types.WhereMsg)
                   (ww2 :: Types.Msg)
                   (ww3 :: Lexer.SrcLoc)
                   (ww4 :: Types.ErrType)
                   (ww5 :: GHC.Base.Maybe Types.WhereMsg)
                   (ww6 :: Types.Msg)
                   (ww7 :: Lexer.SrcLoc) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Types.ErrType ww)
                           (GHC.Prim.dataToTag# @ Types.ErrType ww4)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww5 of wild2 {
                             GHC.Base.Nothing
                             -> case GHC.Base.eqString ww2 ww6 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> Lexer.$fEqSrcLoc_$c== ww3 ww7 }
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww5 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Base.eqString a1 b1 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Base.eqString ww2 ww6 of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True -> Lexer.$fEqSrcLoc_$c== ww3 ww7 } } } } }) -}
a561d9634934b24a558f5a6cb169be48
  $w$cshow :: Lexer.LToken -> [Types.CFType] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Lexer.LToken) (ww1 :: [Types.CFType]) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Types.$fShowCConstr3
                   (case ww of ww2 { Lexer.L ww3 ww4 ->
                    Lexer.$w$cshowsPrec1
                      @ Lexer.Token
                      Lexer.$fShowToken
                      11#
                      ww3
                      ww4
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (GHC.Show.showList__
                            @ Types.CFType
                            Types.$fShowCConstr2
                            ww1
                            (GHC.Types.[] @ GHC.Types.Char))) })) -}
1e04e6abe74404d573e08802bcf2f312
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Types.F
    -> [Types.TInst]
    -> [Types.CInput]
    -> Types.COutput
    -> [Types.CConn]
    -> Types.CProc
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U(1*U,U)><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.F)
                   (ww2 :: [Types.TInst])
                   (ww3 :: [Types.CInput])
                   (ww4 :: Types.COutput)
                   (ww5 :: [Types.CConn])
                   (ww6 :: Types.CProc)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowC15
                       (Types.$fShowC_$cshowsPrec1
                          Types.$fShowC8
                          ww1
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Show.showList__
                                @ ([GHC.Types.Char], GHC.Types.Int, Types.NameId, Types.I,
                                   GHC.Types.Bool)
                                Types.$fShowC6
                                ww2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (GHC.Show.showList__
                                      @ ([GHC.Types.Char], Types.FType)
                                      Types.$fShowC5
                                      ww3
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (case ww4 of ww7 { (,) ww8 ww9 ->
                                          GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows7
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows6
                                               (GHC.Show.showLitString
                                                  ww8
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.shows6
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.shows5
                                                        (GHC.Show.$fShow(,)_$sgo
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.shows4
                                                              (GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 GHC.Show.showSpace1
                                                                 (GHC.Show.showList__
                                                                    @ ([GHC.Types.Char],
                                                                       (Types.NameId,
                                                                        Types.CSignal),
                                                                       (Types.NameId,
                                                                        Types.CSignal))
                                                                    Types.$fShowC4
                                                                    ww5
                                                                    (GHC.Types.:
                                                                       @ GHC.Types.Char
                                                                       GHC.Show.showSpace1
                                                                       (GHC.Show.showList__
                                                                          @ Types.CProcUnit
                                                                          Types.$fShowC2
                                                                          ww6
                                                                          x)))))
                                                           (\ (w1 :: GHC.Base.String) ->
                                                            Types.$w$cshowsPrec1 0# ww9 w1)
                                                           (GHC.Types.[]
                                                              @ GHC.Show.ShowS)))))) })))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
8b9bd064502b5d5eb590940bf149b133
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Types.FType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
699c8dfd99dfdf1ef8310920772e4fb1
  $w$cshowsPrec10 ::
    GHC.Prim.Int#
    -> [Types.CFunc] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.CFunc])
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowCore2
                        (GHC.Show.showList__ @ Types.CFunc Types.$fShowCFunc1 ww1 w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowCore2
                           (GHC.Show.showList__
                              @ Types.CFunc
                              Types.$fShowCFunc1
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
a8550adbd441eb2b0a2572d15ca96e5a
  $w$cshowsPrec11 ::
    Types.ErrType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Types.ErrType) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.ErrConstantAsFunction
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType18 w1
                   Types.ArityMismatch
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType17 w1
                   Types.FunctionNotDeclared
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType16 w1
                   Types.ComponentNotDone
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType15 w1
                   Types.UniqueInstanceNotFound
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType14 w1
                   Types.ModifyUnexistingInstance
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType13 w1
                   Types.AllInstancesUsed
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType12 w1
                   Types.NoConnectionsForComponent
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType11 w1
                   Types.CouldntGetNextInstance
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType10 w1
                   Types.VariableNotInScope
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType9 w1
                   Types.WrongInstanceNumberInput
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType8 w1
                   Types.ConstantsHaveNoInputs
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType7 w1
                   Types.ImpossibleConnection
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType6 w1
                   Types.ExpressionConstructionErr
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType5 w1
                   Types.TypeNotPermitted
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType4 w1
                   Types.CannotSynth
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType3 w1
                   Types.RecursionWithoutCondition
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType2 w1
                   Types.CantMatchTypes
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowErrType1 w1 }) -}
75122b63e5961b302503fd32a38ea24b
  $w$cshowsPrec12 ::
    GHC.Prim.Int# -> Types.FVarCons -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.FVarCons) ->
                 case w of wild {
                   Types.FVar b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Lexer.L ww3 ww4 ->
                          Lexer.$w$cshowsPrec1
                            @ [GHC.Types.Char]
                            GHC.Show.$fShow[]_$s$fShow[]1
                            11#
                            ww3
                            ww4 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowFVarCons3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowFVarCons3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Types.FCons b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Types.$fShowFCons_$cshowsPrec Types.$fShowC8 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowFVarCons2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowFVarCons2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
1143e098c46af005c167ea9f06bfd94b
  $w$cshowsPrec13 ::
    Types.RecursionClassification -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Types.RecursionClassification)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.LeftRecursive
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowRecursionClassification5
                        w1
                   Types.RightRecursive
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowRecursionClassification4
                        w1
                   Types.MultipleRecursive
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowRecursionClassification3
                        w1
                   Types.NonTerminatingRecursion
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowRecursionClassification2
                        w1
                   Types.NonRecursive
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowRecursionClassification1
                        w1 }) -}
bc264b66c5f5c83a739a7acdd40704ca
  $w$cshowsPrec14 :: GHC.Prim.Int# -> Types.TCExpr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
e00f542b55fb88efcc499e4ae2871d23
  $w$cshowsPrec15 ::
    GHC.Prim.Int#
    -> Lexer.LToken
    -> [(Lexer.LToken, Types.CFType)]
    -> Types.TCGuards
    -> Types.CFType
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U(U,U)><L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Lexer.LToken)
                   (ww2 :: [(Lexer.LToken, Types.CFType)])
                   (ww3 :: Types.TCGuards)
                   (ww4 :: Types.CFType) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Lexer.L ww6 ww7 ->
                     Lexer.$w$cshowsPrec1 @ Lexer.Token Lexer.$fShowToken 11# ww6 ww7 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Types.$w$cshowsPrec16 11# ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Types.$w$cshowsPrec7 11# ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowTCFunc3
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Show.showList__
                                @ (Lexer.L Lexer.Token, Types.CFType)
                                Types.$fShowTCFunc2
                                ww2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f1 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
56a436ce47366ace40afb5bf26b6afb6
  $w$cshowsPrec16 ::
    GHC.Prim.Int# -> Types.TCGuards -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.TCGuards) ->
                 case w of wild {
                   Types.TCNoGuards b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Types.$w$cshowsPrec14 11# b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowTCFunc6 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTCFunc6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Types.TCGuards b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowTCFunc5
                             (GHC.Show.showList__
                                @ (Types.TCExpr, Types.TCExpr)
                                Types.$fShowTCFunc4
                                b1
                                x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowTCFunc5
                                (GHC.Show.showList__
                                   @ (Types.TCExpr, Types.TCExpr)
                                   Types.$fShowTCFunc4
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
c13885889f8b6f1b4c0346f1771cb800
  $w$cshowsPrec17 ::
    GHC.Prim.Int#
    -> [Types.TCFunc] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Types.TCFunc])
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTCore2
                        (GHC.Show.showList__ @ Types.TCFunc Types.$fShowTCFunc1 ww1 w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowTCore2
                           (GHC.Show.showList__
                              @ Types.TCFunc
                              Types.$fShowTCFunc1
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
4dc191a9a2c9e015530b687484fa3357
  $w$cshowsPrec18 ::
    GHC.Prim.Int#
    -> Types.ErrType
    -> GHC.Base.Maybe Types.WhereMsg
    -> Types.Msg
    -> Lexer.SrcLoc
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U><L,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.ErrType)
                   (ww2 :: GHC.Base.Maybe Types.WhereMsg)
                   (ww3 :: Types.Msg)
                   (ww4 :: Lexer.SrcLoc) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Types.$fShowC8
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     Types.$w$cshowsPrec11
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      ww3
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (Lexer.$fShowAlexResult_$cshowsPrec
                                               Types.$fShowC8
                                               ww4
                                               x))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Types.$fShowTErr2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Types.$fShowTErr2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
4608f54b75b9a86394bd173384a8f6bf
  $w$cshowsPrec19 :: GHC.Prim.Int# -> Types.TLog -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.TLog) ->
                 case w of wild {
                   Types.TLog b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowTLog6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Show.showLitString
                                  b1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (case b2 of wild1 {
                                           Types.TInitialStage
                                           -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTLog5 x
                                           Types.TInterpretationStage
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Types.$fShowTLog4
                                                x })))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Types.TLogErr b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Types.TErr ww2 ww3 ww4 ww5 ->
                          Types.$w$cshowsPrec18 11# ww2 ww3 ww4 ww5 }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowTLog3
                            (f (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild1 {
                                     Types.TInitialStage
                                     -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTLog5 x
                                     Types.TInterpretationStage
                                     -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTLog4 x })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Types.TLogDebug b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowTLog2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Show.showLitString
                                  b1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (case b2 of wild1 {
                                           Types.TInitialStage
                                           -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTLog5 x
                                           Types.TInterpretationStage
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Types.$fShowTLog4
                                                x })))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
6059484b3cf75b146e42f0ec8a86cdf0
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Types.I -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
157ecfd64b62fd01c487d32e80c546e7
  $w$cshowsPrec20 ::
    GHC.Prim.Int#
    -> Types.SourceCode
    -> [(Lexer.L Types.Name, [Types.CConstr], Types.IsRec, Types.Used)]
    -> [(Types.Name, [Types.Constraint], [Types.CFType])]
    -> [([Types.Constraint], [Types.CFType])]
    -> Types.TStage
    -> [(Types.CFType, Types.CFType)]
    -> Types.TCore
    -> [Types.TLog]
    -> [Types.TFunc]
    -> [(Types.Name, Types.Id, [Types.FType])]
    -> [Types.TComp]
    -> [Types.TInst]
    -> [Types.CConn]
    -> [Types.Name]
    -> [(Types.Name, Types.Name, Types.FType,
         GHC.Base.Maybe GHC.Types.Int)]
    -> Types.SystemC
    -> [(Types.CompName, GHC.Base.String, GHC.Types.Int)]
    -> Types.Core
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 20,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U)><L,U>,
     Inline: [0] -}
234f2b6a6efd5e7b44adff20ac6e2db2
  $w$cshowsPrec21 ::
    Types.TypeClassification -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Types.TypeClassification)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.OutputRecursive
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTypeClassification4 w1
                   Types.InputRecursive
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTypeClassification3 w1
                   Types.OutputInputRecursive
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowTypeClassification2 w1
                   Types.NoRecursiveTypes
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Types.$fShowTypeClassification1
                        w1 }) -}
7a32821cac28a02236f90b3a9d4c8bfb
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Types.Name -> Types.Id -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Types.Name)
                   (ww2 :: Types.Id)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowC7
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of ww3 { GHC.Types.I# ww4 ->
                                    case GHC.Show.$wshowSignedInt
                                           11#
                                           ww4
                                           x of ww5 { (#,#) ww6 ww7 ->
                                    GHC.Types.: @ GHC.Types.Char ww6 ww7 } })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
f0164379fcbf1ee84d79a6d7cd973f63
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Types.FGuards -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Types.FGuards)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Types.FGuards b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowC13
                             (GHC.Show.showList__
                                @ (Types.FExpr, Types.FExpr)
                                Types.$fShowC12
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowC13
                                (GHC.Show.showList__
                                   @ (Types.FExpr, Types.FExpr)
                                   Types.$fShowC12
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }
                   Types.NoFGuards b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowC11
                             (Types.$w$cshowsPrec5 11# b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowC11
                                (Types.$w$cshowsPrec5
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) } }) -}
6b3f2b074af6414441f2b2fb429b4efe
  $w$cshowsPrec5 ::
    GHC.Prim.Int# -> Types.FExpr -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
18bb1a057acbf02b0aaf0da6ff635568
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Lexer.LToken -> [Types.CFType] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Lexer.LToken)
                   (ww2 :: [Types.CFType]) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Lexer.L ww4 ww5 ->
                     Lexer.$w$cshowsPrec1 @ Lexer.Token Lexer.$fShowToken 11# ww4 ww5 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowCConstr3
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Show.showList__ @ Types.CFType Types.$fShowCConstr2 ww2 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
8104f895f8b3e96ad3976476ae2f7330
  $w$cshowsPrec7 :: GHC.Prim.Int# -> Types.CFType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
35c08f43bd03d90493d59882b7c428cc
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> Lexer.LToken
    -> [Lexer.LToken]
    -> Types.CGuards
    -> [Types.CFType]
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U(U,U)><L,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Lexer.LToken)
                   (ww2 :: [Lexer.LToken])
                   (ww3 :: Types.CGuards)
                   (ww4 :: [Types.CFType]) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Lexer.L ww6 ww7 ->
                     Lexer.$w$cshowsPrec1 @ Lexer.Token Lexer.$fShowToken 11# ww6 ww7 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Types.$w$cshowsPrec9 11# ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowCFunc3
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Show.showList__
                                @ (Lexer.L Lexer.Token)
                                Types.$fShowCFunc2
                                ww2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (f1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (GHC.Show.showList__
                                            @ Types.CFType
                                            Types.$fShowCConstr2
                                            ww4
                                            x)))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
294e122f69eabf0fb6865528d745d6f2
  $w$cshowsPrec9 :: GHC.Prim.Int# -> Types.CGuards -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Types.CGuards) ->
                 case w of wild {
                   Types.CNoGuards b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Parser.$w$cshowsPrec6 11# b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Types.$fShowCFunc6 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCFunc6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Types.CGuards b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Types.$fShowCFunc5
                             (GHC.Show.showList__
                                @ (Parser.PExpr, Parser.PExpr)
                                Types.$fShowCFunc4
                                b1
                                x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowCFunc5
                                (GHC.Show.showList__
                                   @ (Parser.PExpr, Parser.PExpr)
                                   Types.$fShowCFunc4
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
32b4964f59a493a56a8889cd8d33cfac
  type Arity = GHC.Types.Int
784b7d6a2aa49dd7409f098fea375770
  data C
    = C Types.F
        [Types.TInst]
        [Types.CInput]
        Types.COutput
        [Types.CConn]
        Types.CProc
4d6bbc82c553fb41fbacc4cdf5b0ccd3
  type CConn =
    (Types.CompName, (Types.NameId, Types.CSignal),
     (Types.NameId, Types.CSignal))
406345940f930081e4da3d7c6154c2ec
  data CConstr = CConstr Lexer.LToken [Types.CFType]
8104f895f8b3e96ad3976476ae2f7330
  data CFType
    = CTApp Lexer.LToken [Types.CFType]
    | CTArrow Lexer.SrcLoc [Types.CFType]
    | CTAExpr Lexer.LToken
1710acfef62a9879edfeaff433f44f9c
  data CFunc
    = CFunc Lexer.LToken [Lexer.LToken] Types.CGuards [Types.CFType]
294e122f69eabf0fb6865528d745d6f2
  data CGuards
    = CNoGuards Parser.PExpr | CGuards [(Parser.PExpr, Parser.PExpr)]
b15cfca94f4dc3ad079e15edc56ec4f5
  type CInput = Types.FTyped GHC.Base.String
12ee0a46c72555244884369b26156a79
  type COutput = Types.FTyped GHC.Base.String
0476a9cdd54a10555b6e6674e2dabfae
  type CProc = [Types.CProcUnit]
0476a9cdd54a10555b6e6674e2dabfae
  data CProcUnit
    = GETINPUT (Types.FTyped GHC.Base.String)
    | GETSTREAMSAFE (GHC.Types.Int, GHC.Types.Int)
                    GHC.Types.Int
                    (Types.FTyped GHC.Base.String)
    | GETSTREAMV GHC.Types.Int (Types.FTyped GHC.Base.String)
    | PUTSTREAM GHC.Types.Int
                (Types.FTyped GHC.Base.String)
                GHC.Base.String
    | SWITCH (Types.FTyped GHC.Base.String) GHC.Types.Int GHC.Types.Int
    | PUTOUTPUT GHC.Base.String GHC.Base.String
    | PUTOUTPUTSTREAM GHC.Types.Int GHC.Base.String GHC.Base.String
    | PUTOUTPUTSTREAMV Types.FType
                       GHC.Types.Int
                       GHC.Base.String
                       GHC.Base.String
    | GET (Types.FTyped GHC.Base.String)
    | PUT (Types.FTyped GHC.Base.String) GHC.Base.String
    | PUTV (Types.FTyped GHC.Base.String) GHC.Base.String
    | COND GHC.Types.Int GHC.Base.String
    | IF GHC.Types.Int Types.CProc
    | ELSEIF GHC.Types.Int Types.CProc
    | ELSE Types.CProc
    | LOOP Types.CProc
    | BREAK
    | DESTROY GHC.Types.Int (GHC.Base.String, Types.FType)
    | DESTROYV (GHC.Base.String, Types.FType)
    | PUTSTATE GHC.Base.String GHC.Base.String
    | SAVE (Types.FTyped GHC.Base.String)
    | SAVEV (Types.FTyped GHC.Base.String)
    | COPY Types.FType GHC.Base.String GHC.Base.String
    | PCOPY GHC.Types.Int Types.FType GHC.Base.String GHC.Base.String
    | COPYV Types.FType GHC.Base.String GHC.Base.String
    | MAKEV Types.FType GHC.Base.String GHC.Base.String
    | CLEARV GHC.Base.String
    | RESTV GHC.Base.String
    | BLOB GHC.Types.Int
64ca7dc722575f0228657105dc48acd1
  type CSignal = Types.FTyped GHC.Base.String
4228b9a1b27aab3097285eec31223745
  type CompName = Types.Name
b52d039eaf4ef6d1a19dae86e8762e00
  type Constraint = (Types.Name, Types.Name)
438d7d9868420ea466e01d42ff11e8f8
  data Core = Core [Types.CFunc]
a8550adbd441eb2b0a2572d15ca96e5a
  data ErrType
    = ErrConstantAsFunction
    | ArityMismatch
    | FunctionNotDeclared
    | ComponentNotDone
    | UniqueInstanceNotFound
    | ModifyUnexistingInstance
    | AllInstancesUsed
    | NoConnectionsForComponent
    | CouldntGetNextInstance
    | VariableNotInScope
    | WrongInstanceNumberInput
    | ConstantsHaveNoInputs
    | ImpossibleConnection
    | ExpressionConstructionErr
    | TypeNotPermitted
    | CannotSynth
    | RecursionWithoutCondition
    | CantMatchTypes
74171069deaec79bbacaae4de0c8605f
  data F
    = F [(Types.FVar, Types.FType)] Types.FGuards Types.FType
    | SpecialF
2ec890fe0c2f9bbc85377a0c9d5e9581
  data FCons
    = FBin (Lexer.L GHC.Base.String)
    | FHex (Lexer.L GHC.Base.String)
    | FDec (Lexer.L GHC.Types.Int)
    | FForeverWait
6b3f2b074af6414441f2b2fb429b4efe
  data FExpr
    = FApp (Lexer.L Types.Name, Types.Id) [Types.FExpr] Types.FType
    | FAExpr (Types.FVarCons, Types.Id, Types.FType)
f0164379fcbf1ee84d79a6d7cd973f63
  data FGuards
    = FGuards [(Types.FExpr, Types.FExpr)] | NoFGuards Types.FExpr
8b9bd064502b5d5eb590940bf149b133
  data FType
    = BitVec Lexer.SrcLoc GHC.Types.Int
    | Bit Lexer.SrcLoc
    | Function Lexer.SrcLoc
    | Nat Lexer.SrcLoc GHC.Types.Int
    | Stream Types.FType
696f4bbfaed84743a0131b4ab8f72888
  type FTyped a = (a, Types.FType)
543a0b0b31fe829517cebef23ecba95b
  type FVar = Lexer.L Types.Name
75122b63e5961b302503fd32a38ea24b
  data FVarCons = FVar Types.FVar | FCons Types.FCons
7880caf15877d8eb60f0074a434f4fff
  type File = (Types.Name, GHC.Base.String)
f987591a5f45a2a22f5403e30181484b
  type FunctionClassification =
    (Types.RecursionClassification, Types.TypeClassification,
     Types.IsConsExpr)
cd65f02d8d812e18764520f4aa53deb6
  type HighOrder = [GHC.Types.Int]
6059484b3cf75b146e42f0ec8a86cdf0
  data I
    = I [Types.CInput] Types.COutput
    | ConstBinI GHC.Base.String Types.COutput
    | ConstHexI GHC.Base.String Types.COutput
    | ConstDecI GHC.Types.Int Types.COutput
    | ConstStrI [Types.FCons] Types.COutput
    | SpecialI [Types.CInput] Types.COutput [GHC.Types.Int]
    | FifoI Types.CInput Types.COutput
    | ForkI GHC.Types.Int Types.CInput [Types.COutput]
2682eaa34ecb623f5ad090b662e6527a
  type Id = GHC.Types.Int
22e43b7fcd96b6213ef9409f37d3c228
  type IsConsExpr = GHC.Types.Bool
ba9812d6a2cf36a79baceb628349d3a4
  type IsRec = GHC.Types.Bool
b42d0bf5c885aa03591b69d72d176fcf
  type Msg = GHC.Base.String
4bbc3da5ef1d02db55291a2a33a7c002
  type Name = GHC.Base.String
4aa1b762a773a120e02f482bc8631e08
  data NameId = NameId Types.Name Types.Id
1143e098c46af005c167ea9f06bfd94b
  data RecursionClassification
    = LeftRecursive
    | RightRecursive
    | MultipleRecursive
    | NonTerminatingRecursion
    | NonRecursive
53ecf0e062897cbfeda5c1adfc1ddc82
  type SourceCode = GHC.Base.String
48f8effc3e08d9f589b1a22258ba55a4
  type SystemC = [Types.File]
bc264b66c5f5c83a739a7acdd40704ca
  data TCExpr
    = TCApp Lexer.LToken [Types.TCExpr] Types.CFType
    | TCAExpr (Lexer.LToken, Types.CFType)
12aff70e921393996a769ff39cd06cc8
  data TCFunc
    = TCFunc Lexer.LToken
             [(Lexer.LToken, Types.CFType)]
             Types.TCGuards
             Types.CFType
56a436ce47366ace40afb5bf26b6afb6
  data TCGuards
    = TCNoGuards Types.TCExpr | TCGuards [(Types.TCExpr, Types.TCExpr)]
512c2abf100124d914051cfc1b1240b4
  type TComp = (Types.Name, Types.C)
37b29aaac158f03681018e20b16bb37a
  data TCore = TCore [Types.TCFunc]
2ca627f167c05972904f3acdfbba14a6
  data TErr
    = TErr Types.ErrType
           (GHC.Base.Maybe Types.WhereMsg)
           Types.Msg
           Lexer.SrcLoc
3c2f7afcecfe357ec2bf84c74b0ec723
  type TFunc =
    (Types.Name, Lexer.SrcLoc, Types.F, Types.Arity,
     Types.FunctionClassification, Types.HighOrder)
17bef6e9e2329998cd16deab3a7bfd4a
  type TInst =
    (Types.CompName, Types.Id, Types.NameId, Types.I, Types.Used)
4608f54b75b9a86394bd173384a8f6bf
  data TLog
    = TLog Types.Msg Types.TStage
    | TLogErr Types.TErr Types.TStage
    | TLogDebug Types.Msg Types.TStage
f4ba4f96d9f8dffc5235169391939992
  type TM a = Control.Monad.Trans.State.Lazy.State Types.TState a
a7c38748359d680c785978249d7123ff
  type TMM a = Types.TM (GHC.Base.Maybe a)
2790536fe3b8b1cd1b284b55137862d3
  data TStage = TInitialStage | TInterpretationStage
40f95c047818067e4f0b74424938b4b0
  data TState
    = TState {sourceCode :: Types.SourceCode,
              dataDecls :: [(Lexer.L Types.Name, [Types.CConstr], Types.IsRec,
                             Types.Used)],
              funcTypes :: [(Types.Name, [Types.Constraint], [Types.CFType])],
              typeCheckState :: [([Types.Constraint], [Types.CFType])],
              actualStage :: Types.TStage,
              typeChanges :: [(Types.CFType, Types.CFType)],
              tCore :: Types.TCore,
              tLogs :: [Types.TLog],
              tFuncs :: [Types.TFunc],
              functionIds :: [(Types.Name, Types.Id, [Types.FType])],
              components :: [Types.TComp],
              instances :: [Types.TInst],
              connections :: [Types.CConn],
              logicalConnections :: [Types.Name],
              logicalOutputs :: [(Types.Name, Types.Name, Types.FType,
                                  GHC.Base.Maybe GHC.Types.Int)],
              systemC :: Types.SystemC,
              timesForked :: [(Types.CompName, GHC.Base.String, GHC.Types.Int)],
              core :: Types.Core}
1dfec07a9669d8465c4d4a3b8c5275be
  data TransitionType
    = ConsRTransition GHC.Types.Int
    | RestTransition
    | ConsTransition GHC.Types.Int
    | IdTransition
    | FunctionTransition
234f2b6a6efd5e7b44adff20ac6e2db2
  data TypeClassification
    = OutputRecursive
    | InputRecursive
    | OutputInputRecursive
    | NoRecursiveTypes
5aca5da094e92ef0b944df193939f3b1
  type Used = GHC.Types.Bool
a45a80621cb08bb91589d9773a8e8170
  type WhereMsg = Types.Msg
3f721df435570fa5682ef1954999e28e
  actualStage :: Types.TState -> Types.TStage
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds5 }) -}
8dba763a20197c190eb2249a3f3ab046
  components :: Types.TState -> [Types.TComp]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds11 }) -}
3ebb5752f18daaebdb98a114caee49f3
  connections :: Types.TState -> [Types.CConn]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds13 }) -}
ec551278598a7221aac2af0038b71cc5
  core :: Types.TState -> Types.Core
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds18 }) -}
cde3c1bf0abb25486cab7c3e8499ca96
  dataDecls ::
    Types.TState
    -> [(Lexer.L Types.Name, [Types.CConstr], Types.IsRec, Types.Used)]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds2 }) -}
27d3c001c05d12c84223c4b2d421d8f6
  funcTypes ::
    Types.TState -> [(Types.Name, [Types.Constraint], [Types.CFType])]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds3 }) -}
cc528c32a1b4a88357fb967fbb4c16e6
  functionIds ::
    Types.TState -> [(Types.Name, Types.Id, [Types.FType])]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds10 }) -}
e15a87b50b340ea2bd8a5dda7bb820a4
  initialDataDecls ::
    [(Lexer.L Types.Name, [Types.CConstr], Types.IsRec, Types.Used)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Lexer.L Types.Name, [Types.CConstr], Types.IsRec, Types.Used)
                   Types.initialDataDecls1
                   (GHC.Types.[]
                      @ (Lexer.L Types.Name, [Types.CConstr], Types.IsRec,
                         Types.Used))) -}
ab790904471a04445932c73b9bc2378e
  initialDataDecls1 ::
    (Lexer.L [GHC.Types.Char], [Types.CConstr], GHC.Types.Bool,
     GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Types.initialDataDecls12, Types.initialDataDecls2,
                  GHC.Types.False, GHC.Types.False)) -}
aab4d29b0c0a3d12372dff1566e3d7c8
  initialDataDecls10 :: Lexer.Token
  {- Strictness: m8,
     Unfolding: (Lexer.Upp Types.initialDataDecls11) -}
0c93e651a9499091f84f4ba4a04dc880
  initialDataDecls11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "False"#) -}
d638a26ecf89c5afa937fbd76d8c0516
  initialDataDecls12 :: Lexer.L [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ [GHC.Types.Char]
                   Lexer.NoLoc
                   Types.initialDataDecls13) -}
a0ef00eddfafe19e17a4419649630797
  initialDataDecls13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bool"#) -}
fc7cc1150e0f9f3c2afc6d86ca0b9546
  initialDataDecls2 :: [Types.CConstr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CConstr
                   Types.initialDataDecls8
                   Types.initialDataDecls3) -}
613c6927f63a8ee3865129e69fa6e722
  initialDataDecls3 :: [Types.CConstr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CConstr
                   Types.initialDataDecls4
                   (GHC.Types.[] @ Types.CConstr)) -}
84723d3e6521029c9486d52d5c1e64d0
  initialDataDecls4 :: Types.CConstr
  {- Strictness: m,
     Unfolding: (Types.CConstr
                   Types.initialDataDecls5
                   (GHC.Types.[] @ Types.CFType)) -}
7c80df8d083bf30b016160a114095b5b
  initialDataDecls5 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.initialDataDecls6) -}
bd57f98741b75fcb5e0abe5ca52d15fe
  initialDataDecls6 :: Lexer.Token
  {- Strictness: m8,
     Unfolding: (Lexer.Upp Types.initialDataDecls7) -}
0ea1acfc881c589b8e533a57f4212b4d
  initialDataDecls7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "True"#) -}
95d4dcd067346680465c3a854ee09832
  initialDataDecls8 :: Types.CConstr
  {- Strictness: m,
     Unfolding: (Types.CConstr
                   Types.initialDataDecls9
                   (GHC.Types.[] @ Types.CFType)) -}
bf075da9978506416f6ab524cd84b2fa
  initialDataDecls9 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.initialDataDecls10) -}
246bf90dd5a77d0b3d37bcaa9252b14b
  initialTState :: Types.TState
  {- Unfolding: (Types.TState
                   (GHC.Types.[] @ GHC.Types.Char)
                   Types.initialDataDecls
                   Types.preDefinedfunctionsTypes
                   (GHC.Types.[] @ ([Types.Constraint], [Types.CFType]))
                   Types.TInitialStage
                   Types.typeChangesInitial
                   Types.initialTState2
                   (GHC.Types.[] @ Types.TLog)
                   Types.specialFuncs
                   (GHC.Types.[] @ (Types.Name, Types.Id, [Types.FType]))
                   (GHC.Types.[] @ Types.TComp)
                   (GHC.Types.[] @ Types.TInst)
                   (GHC.Types.[] @ Types.CConn)
                   (GHC.Types.[] @ Types.Name)
                   (GHC.Types.[]
                      @ (Types.Name, Types.Name, Types.FType,
                         GHC.Base.Maybe GHC.Types.Int))
                   (GHC.Types.[] @ Types.File)
                   (GHC.Types.[] @ (Types.CompName, GHC.Base.String, GHC.Types.Int))
                   Types.initialTState1) -}
8d135dd7d825d7249c6f34f0285130ca
  initialTState1 :: Types.Core
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Core (GHC.Types.[] @ Types.CFunc)) -}
4cf575517e482cbed38a1ad02e3ea114
  initialTState2 :: Types.TCore
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.TCore (GHC.Types.[] @ Types.TCFunc)) -}
3fdf52168cdb62ee6e4ef8e4481a4ce6
  instances :: Types.TState -> [Types.TInst]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds12 }) -}
5da2d285c59d331b587828538ac41fcd
  logicalConnections :: Types.TState -> [Types.Name]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds14 }) -}
ee8bac27ffd721260adda3ad3218b39b
  logicalOutputs ::
    Types.TState
    -> [(Types.Name, Types.Name, Types.FType,
         GHC.Base.Maybe GHC.Types.Int)]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds15 }) -}
0c8f75892539c905e9e5d99d33f77871
  preDefinedfunctionsTypes ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes84
                   Types.preDefinedfunctionsTypes1) -}
9d69fbd84d039071eef56e060b4eea23
  preDefinedfunctionsTypes1 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes83
                   Types.preDefinedfunctionsTypes2) -}
15b9a98d71ff22d45ca7842eca2ce842
  preDefinedfunctionsTypes10 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes57
                   Types.preDefinedfunctionsTypes11) -}
f226127960c38c1d347a6c371a6131fd
  preDefinedfunctionsTypes11 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes51
                   Types.preDefinedfunctionsTypes12) -}
f99eade15032be712df6ba12cfa10a21
  preDefinedfunctionsTypes12 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes50
                   Types.preDefinedfunctionsTypes13) -}
dd1315c3559a2557f8b9c8c05cecfeae
  preDefinedfunctionsTypes13 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes49
                   Types.preDefinedfunctionsTypes14) -}
73e51df1995aa8fd5ab6551847197726
  preDefinedfunctionsTypes14 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes38
                   Types.preDefinedfunctionsTypes15) -}
35205314e841bf757ce30927dcdb142a
  preDefinedfunctionsTypes15 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes19
                   Types.preDefinedfunctionsTypes16) -}
257dbb4d50afd8350bc9acc26cff2063
  preDefinedfunctionsTypes16 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes17
                   (GHC.Types.[]
                      @ (Types.Name, [Types.Constraint], [Types.CFType]))) -}
08803a79bb8f7bcd400b77197ed9d9cf
  preDefinedfunctionsTypes17 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs37, GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes18)) -}
5d5db72ffb87ec08de6762ef6fa57937
  preDefinedfunctionsTypes18 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.typeChangesInitial6
                   (GHC.Types.[] @ Types.CFType)) -}
f4ff7f9d4c5f4430cabde00ba86bfa7d
  preDefinedfunctionsTypes19 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes37,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes20)) -}
76fc0fbe2b6d2564aaf1fb5cfac5faa2
  preDefinedfunctionsTypes2 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes81
                   Types.preDefinedfunctionsTypes3) -}
47b312da2803465a22b3935258aee525
  preDefinedfunctionsTypes20 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes23
                   Types.preDefinedfunctionsTypes21) -}
8a0b3bf539fc065f07ac97e9f6cb16f6
  preDefinedfunctionsTypes21 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes23
                   Types.preDefinedfunctionsTypes22) -}
128345e258d10e5993885ed9bb4fe07b
  preDefinedfunctionsTypes22 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes23
                   (GHC.Types.[] @ Types.CFType)) -}
00904d2b1123dcdb383b0ccf0e49620f
  preDefinedfunctionsTypes23 :: Types.CFType
  {- Strictness: m1,
     Unfolding: (Types.CTApp
                   Types.preDefinedfunctionsTypes34
                   Types.preDefinedfunctionsTypes24) -}
a4106454b96f65a7401b61e4117ac4ab
  preDefinedfunctionsTypes24 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes30
                   Types.preDefinedfunctionsTypes25) -}
1cfad17d857d7aca9642a17d9ea0e71f
  preDefinedfunctionsTypes25 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes26
                   (GHC.Types.[] @ Types.CFType)) -}
f75c41eca2953380caec7612769dc339
  preDefinedfunctionsTypes26 :: Types.CFType
  {- Strictness: m3,
     Unfolding: (Types.CTAExpr Types.preDefinedfunctionsTypes27) -}
abf9b23325f70862f6444d3a651cc052
  preDefinedfunctionsTypes27 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.preDefinedfunctionsTypes28) -}
8abe8960cb3e1f77a534016f4fa63565
  preDefinedfunctionsTypes28 :: Lexer.Token
  {- Strictness: m7,
     Unfolding: (Lexer.Low Types.preDefinedfunctionsTypes29) -}
1a05bd7bb9397ab31978ad1058ed29d4
  preDefinedfunctionsTypes29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "n"#) -}
31613041a9b564afa14c9977d292a776
  preDefinedfunctionsTypes3 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes78
                   Types.preDefinedfunctionsTypes4) -}
8736433028b934e379cff406a33ca559
  preDefinedfunctionsTypes30 :: Types.CFType
  {- Strictness: m3,
     Unfolding: (Types.CTAExpr Types.preDefinedfunctionsTypes31) -}
ca7f4cd6b8a10e5ae44ab066a4f58eb6
  preDefinedfunctionsTypes31 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.preDefinedfunctionsTypes32) -}
a3f4c245635de6bea08effad695a9c54
  preDefinedfunctionsTypes32 :: Lexer.Token
  {- Strictness: m7,
     Unfolding: (Lexer.Low Types.preDefinedfunctionsTypes33) -}
20f70a2ab887f93e72e970a585a73a45
  preDefinedfunctionsTypes33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "m"#) -}
e25b990994f2ca91c2d8101074e4e478
  preDefinedfunctionsTypes34 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.preDefinedfunctionsTypes35) -}
d2765ae798a777d6d779856042063ee5
  preDefinedfunctionsTypes35 :: Lexer.Token
  {- Strictness: m8,
     Unfolding: (Lexer.Upp Types.preDefinedfunctionsTypes36) -}
8ae05834bedc616cb8b88ac4609cddf4
  preDefinedfunctionsTypes36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fixed"#) -}
887524d607bd7abdd0edc2c3dc1419d2
  preDefinedfunctionsTypes37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "div"#) -}
2c38a6f78efb5b9006ef9e9ca1804b4f
  preDefinedfunctionsTypes38 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs55,
                  Types.preDefinedfunctionsTypes46,
                  Types.preDefinedfunctionsTypes39)) -}
c8e5c7c1b584598ad352fc717b2788e1
  preDefinedfunctionsTypes39 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes42
                   Types.preDefinedfunctionsTypes40) -}
a9e0454b11f9734a63b684adf75ef6cf
  preDefinedfunctionsTypes4 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes76
                   Types.preDefinedfunctionsTypes5) -}
b585a795022ea0f48847748d0f17385a
  preDefinedfunctionsTypes40 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes42
                   Types.preDefinedfunctionsTypes41) -}
dd58f9a2630041a44a2195d818359a61
  preDefinedfunctionsTypes41 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes42
                   (GHC.Types.[] @ Types.CFType)) -}
e926c73e3b6f7d020153eb79550c0a05
  preDefinedfunctionsTypes42 :: Types.CFType
  {- Strictness: m3,
     Unfolding: (Types.CTAExpr Types.preDefinedfunctionsTypes43) -}
71d13f8a5c5c85f752060fed156dd44c
  preDefinedfunctionsTypes43 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.preDefinedfunctionsTypes44) -}
4827be69c09409dc1083295511ecc34e
  preDefinedfunctionsTypes44 :: Lexer.Token
  {- Strictness: m7,
     Unfolding: (Lexer.Low Types.preDefinedfunctionsTypes45) -}
378b8c880c345c048321ae147d087443
  preDefinedfunctionsTypes45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "a"#) -}
4bebf4f75e4d06ffbd16d0b4a94df0c6
  preDefinedfunctionsTypes46 :: [Types.Constraint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Constraint
                   Types.preDefinedfunctionsTypes47
                   (GHC.Types.[] @ Types.Constraint)) -}
c45fdfd4fe36e37fdca2deed86f9ef0d
  preDefinedfunctionsTypes47 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes48,
                  Types.preDefinedfunctionsTypes45)) -}
b69062a9ae1d2ca7b01e5e465dd21892
  preDefinedfunctionsTypes48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Num"#) -}
5122e508773fccf8304039ed51791c61
  preDefinedfunctionsTypes49 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs57,
                  Types.preDefinedfunctionsTypes46,
                  Types.preDefinedfunctionsTypes39)) -}
bcea8dd20addce1cef71d02b5be70c0e
  preDefinedfunctionsTypes5 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes73
                   Types.preDefinedfunctionsTypes6) -}
b05df7b9eab106331e694f6ef4ea798e
  preDefinedfunctionsTypes50 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs59,
                  Types.preDefinedfunctionsTypes46,
                  Types.preDefinedfunctionsTypes39)) -}
29c114adf625abd0f595b4f4a259417b
  preDefinedfunctionsTypes51 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs46,
                  Types.preDefinedfunctionsTypes54,
                  Types.preDefinedfunctionsTypes52)) -}
106985c59ca2e9c83a4b51e3d82ad9ff
  preDefinedfunctionsTypes52 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes42
                   Types.preDefinedfunctionsTypes53) -}
d77a7ecbd2b6fab6001d531be68335a5
  preDefinedfunctionsTypes53 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes42
                   Types.preDefinedfunctionsTypes18) -}
5c1c5b789deb983415c9d2c3cd467b26
  preDefinedfunctionsTypes54 :: [Types.Constraint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Constraint
                   Types.preDefinedfunctionsTypes55
                   (GHC.Types.[] @ Types.Constraint)) -}
27f6589977404c34a40b00a99dbe4163
  preDefinedfunctionsTypes55 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes56,
                  Types.preDefinedfunctionsTypes45)) -}
d2d21faaaa4789774ec9eb104e8dd1f6
  preDefinedfunctionsTypes56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NotRec"#) -}
daeb42bd0473a195f5c33909d0968796
  preDefinedfunctionsTypes57 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs49, GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes58)) -}
e3efb7006fafcb31991780c3eac4caa0
  preDefinedfunctionsTypes58 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.typeChangesInitial6
                   Types.preDefinedfunctionsTypes18) -}
1b98b26bb18d18c6f9fb7b0c11764b32
  preDefinedfunctionsTypes59 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs51, GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes60)) -}
2a74253d8a0ace15c817d1cb0f877fcb
  preDefinedfunctionsTypes6 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes70
                   Types.preDefinedfunctionsTypes7) -}
ec1e4124b9faba4be168f72633d783e8
  preDefinedfunctionsTypes60 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.typeChangesInitial6
                   Types.preDefinedfunctionsTypes58) -}
0d67afcd4ee0d2552c50a27f05041746
  preDefinedfunctionsTypes61 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs53, GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes60)) -}
b6ceb083f2f6c5bf831add0e28a6f892
  preDefinedfunctionsTypes62 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes69,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes63)) -}
28689a8cc56d05ea2723869b09bec549
  preDefinedfunctionsTypes63 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes65
                   Types.preDefinedfunctionsTypes64) -}
4623b85dd3b4019dcd5854b392a732b1
  preDefinedfunctionsTypes64 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes65
                   (GHC.Types.[] @ Types.CFType)) -}
6857178962edc6fa505ed486f866d0d0
  preDefinedfunctionsTypes65 :: Types.CFType
  {- Strictness: m1,
     Unfolding: (Types.CTApp
                   Types.preDefinedfunctionsTypes66
                   Types.preDefinedfunctionsTypes41) -}
38497257fb82de0d25d496a23a874f9f
  preDefinedfunctionsTypes66 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.preDefinedfunctionsTypes67) -}
614c3592831b49782ae3b6efdabda88c
  preDefinedfunctionsTypes67 :: Lexer.Token
  {- Strictness: m8,
     Unfolding: (Lexer.Upp Types.preDefinedfunctionsTypes68) -}
8958f76adab156373d37c7231f75bea6
  preDefinedfunctionsTypes68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "List"#) -}
c0c78839ee9a9cde845e56e28f79cc26
  preDefinedfunctionsTypes69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "__get__Cons__1"#) -}
ce1da65e7a52cc6af264ea2320dda20d
  preDefinedfunctionsTypes7 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes62
                   Types.preDefinedfunctionsTypes8) -}
ceee8f80ceb4ef37f257ea0d9e6976d1
  preDefinedfunctionsTypes70 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes72,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes71)) -}
c72cef035cb57215ba3bd939121167d7
  preDefinedfunctionsTypes71 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes65
                   Types.preDefinedfunctionsTypes41) -}
d77855a9b62b3774081ffe4f0b6619b7
  preDefinedfunctionsTypes72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "__get__Cons__0"#) -}
25c3dd2d85184548ef423eb32fecbb44
  preDefinedfunctionsTypes73 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes75,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes74)) -}
6c23d6f22c1a08d42cf693047ed6c772
  preDefinedfunctionsTypes74 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes65
                   Types.preDefinedfunctionsTypes18) -}
836de064fdeeadd129c028a6c400b6c4
  preDefinedfunctionsTypes75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "__is__Cons"#) -}
365d9f53869fdf2ba386762aaf7e7afe
  preDefinedfunctionsTypes76 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes77,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes74)) -}
6371456223309f5d59f012ca02f8dcb8
  preDefinedfunctionsTypes77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "__is__Nil"#) -}
e076283edf876daf8ce254b0f9bab0db
  preDefinedfunctionsTypes78 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes80,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes79)) -}
4ef5b1aae365c1028640b0c3c86c882e
  preDefinedfunctionsTypes79 :: [Types.CFType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.CFType
                   Types.preDefinedfunctionsTypes42
                   Types.preDefinedfunctionsTypes63) -}
1c8201351120ae858dc395a37af2bea8
  preDefinedfunctionsTypes8 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes61
                   Types.preDefinedfunctionsTypes9) -}
cef2a0e58275b0244ff00d3835a5bdd0
  preDefinedfunctionsTypes80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cons"#) -}
563d5dc30e164320d6f15688ba822781
  preDefinedfunctionsTypes81 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.preDefinedfunctionsTypes82,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes64)) -}
c46446bf7774cd3fcb74bb16adce694d
  preDefinedfunctionsTypes82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nil"#) -}
257b7a3537425b2354e5a1b2400c3ac9
  preDefinedfunctionsTypes83 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.initialDataDecls11,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes18)) -}
996201d0709d04519d8acb513ec15d92
  preDefinedfunctionsTypes84 ::
    ([GHC.Types.Char], [Types.Constraint], [Types.CFType])
  {- Strictness: m,
     Unfolding: ((Types.initialDataDecls7,
                  GHC.Types.[] @ Types.Constraint,
                  Types.preDefinedfunctionsTypes18)) -}
31ee2dc8e08ebd0fd04b817ce2763714
  preDefinedfunctionsTypes9 ::
    [(Types.Name, [Types.Constraint], [Types.CFType])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.Name, [Types.Constraint], [Types.CFType])
                   Types.preDefinedfunctionsTypes59
                   Types.preDefinedfunctionsTypes10) -}
616e0b6995fdaf650381e337e08a356b
  sourceCode :: Types.TState -> Types.SourceCode
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds1 }) -}
30fce0db503e9781081dacc598c42bfe
  specialFuncs :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs58
                   Types.specialFuncs1) -}
87bfa856d2abfe6e92968ce9780ca556
  specialFuncs1 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs56
                   Types.specialFuncs2) -}
dfd7dfabfb730ceb92c16f7d995c3be8
  specialFuncs10 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs26
                   Types.specialFuncs11) -}
241a6c70c5661b2acb59c11307f7d079
  specialFuncs11 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs24
                   Types.specialFuncs12) -}
80582dab2ff31e898ea9ab4eedeb1887
  specialFuncs12 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs21
                   Types.specialFuncs13) -}
3fc1219f5343f5488648f06c21e17833
  specialFuncs13 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs19
                   Types.specialFuncs14) -}
0ec1861b0621c1e081331dc00a018ef0
  specialFuncs14 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs15
                   (GHC.Types.[] @ Types.TFunc)) -}
9ea70aecce783b0e69b357be6956928c
  specialFuncs15 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs18, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs16,
                  GHC.Types.[] @ GHC.Types.Int)) -}
4d0e89ff5f0693fb99659ecd46b5c89b
  specialFuncs16 ::
    (Types.RecursionClassification, Types.TypeClassification,
     GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Types.NonRecursive, Types.OutputInputRecursive,
                  GHC.Types.False)) -}
e4735b908e7ebb2380c7ec08a0610da7
  specialFuncs17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
fb47b074694ce5fb9a000af96cf9efbd
  specialFuncs18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mrest"#) -}
12ec21522e1d12c2195e242ce9720de2
  specialFuncs19 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs20, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs16,
                  GHC.Types.[] @ GHC.Types.Int)) -}
5b86e176439be530acdb37116ecbbb97
  specialFuncs2 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs54
                   Types.specialFuncs3) -}
0ab06a1a66842e09c6c2c86621ed8f90
  specialFuncs20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rest"#) -}
04af6a12babe56148cd430edf49ba83a
  specialFuncs21 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs23, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs22,
                  GHC.Types.[] @ GHC.Types.Int)) -}
4d5ef87a8f5f39cfb1d753f1f7736532
  specialFuncs22 ::
    (Types.RecursionClassification, Types.TypeClassification,
     GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Types.NonRecursive, Types.InputRecursive,
                  GHC.Types.False)) -}
93848bbd13ad1f2b018536f1f0995ac9
  specialFuncs23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "now"#) -}
08c8a4ff715789ad923e6d6fd0e4c5c0
  specialFuncs24 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs25, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs16,
                  GHC.Types.[] @ GHC.Types.Int)) -}
634cab1a0639242224706977eb686804
  specialFuncs25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "consR"#) -}
a30f3d10e2cebe577323c49b40edb048
  specialFuncs26 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs37, Lexer.NoLoc,
                  Types.specialFuncs28, Types.$fShowC3, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
cfbe1f3e03367f8ade057beeab8afa41
  specialFuncs27 ::
    (Types.RecursionClassification, Types.TypeClassification,
     GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Types.NonRecursive, Types.NoRecursiveTypes,
                  GHC.Types.False)) -}
f7d8cbd27432584bf495145e51fbb9ca
  specialFuncs28 :: Types.F
  {- Strictness: m1,
     Unfolding: (Types.F
                   (GHC.Types.[] @ (Types.FVar, Types.FType))
                   Types.specialFuncs30
                   Types.specialFuncs29) -}
c83c9b43632c7a531b539ce74bd2b913
  specialFuncs29 :: Types.FType
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Types.Bit Lexer.NoLoc) -}
9b8d75fc9088797f57d51cf04fac613f
  specialFuncs3 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs52
                   Types.specialFuncs4) -}
2c98e86a9211e882a931492215c4b835
  specialFuncs30 :: Types.FGuards
  {- Strictness: m2,
     Unfolding: (Types.NoFGuards Types.specialFuncs31) -}
458c0add298495523eb4fe53a2085129
  specialFuncs31 :: Types.FExpr
  {- Strictness: m2,
     Unfolding: (Types.FAExpr Types.specialFuncs32) -}
cc4f9a1a211b06a516375274baf2f75e
  specialFuncs32 :: (Types.FVarCons, GHC.Types.Int, Types.FType)
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs33, Types.$fShowC3,
                  Types.specialFuncs29)) -}
a0e1ce5b28579cdf5d0552bc28eea773
  specialFuncs33 :: Types.FVarCons
  {- Strictness: m2, Unfolding: (Types.FCons Types.specialFuncs34) -}
60c507ba9748708db699f6ceb4d2595d
  specialFuncs34 :: Types.FCons
  {- Strictness: m1, Unfolding: (Types.FBin Types.specialFuncs35) -}
c9e6de3c80e4c0cc63c49513b1e0408f
  specialFuncs35 :: Lexer.L [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ [GHC.Types.Char]
                   Lexer.NoLoc
                   Types.specialFuncs36) -}
10e5e2946c5b48e235d5f0b47540543a
  specialFuncs36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1"#) -}
5dab29c26325cd73cefcce4a09424580
  specialFuncs37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "otherwise"#) -}
5c53dc529168bf2bce92bc114534e301
  specialFuncs38 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs39, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs16,
                  GHC.Types.[] @ GHC.Types.Int)) -}
8c2a9680d6be740f300f72a187f5a1c1
  specialFuncs39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cons"#) -}
cbe740a18e81a8f478bfebb5b100f6c4
  specialFuncs4 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs50
                   Types.specialFuncs5) -}
d67f65a1ea02f30d0ac823b1efeb292f
  specialFuncs40 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs41, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
f2f579ca5dcbbde7c1d3f366d074e910
  specialFuncs41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cat"#) -}
4bf62eae74464fa440e03b0c33504c0c
  specialFuncs42 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs44, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs43, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
06a595aef9b14612b34054922ca72335
  specialFuncs43 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
fcb594a3954d191ef58f4129452f11b0
  specialFuncs44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sli"#) -}
9963b0104e74b3a261e01d42761bedf7
  specialFuncs45 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs46, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
03d39cd5172ec1cc3e2bbb26920d3c4b
  specialFuncs46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "equ"#) -}
8a013cf1f79ae4879747127716aa5cb5
  specialFuncs47 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs49, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs48, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
b6ba74de151c1829e34307dc97454c6f
  specialFuncs48 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
39e36860a35966f71660641d6d81f6b7
  specialFuncs49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "not"#) -}
91a6b9dc0785d6438f5510e2ead743e3
  specialFuncs5 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs47
                   Types.specialFuncs6) -}
0b26e68b18ddab2d1c6bbce79da23444
  specialFuncs50 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs51, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
0c53d70718fb4bdcb86ff9b9ff8e1fc5
  specialFuncs51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "or"#) -}
f8fbfc77f0bb92ba8a3fea97b3d17cb7
  specialFuncs52 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs53, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
de3c47ea186a6af8d6638242ce79c3a4
  specialFuncs53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "and"#) -}
53d3ef0f021fcc92f27f221ab7bb81e9
  specialFuncs54 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs55, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
238a2628a0d1f139eec702ecc332c5ba
  specialFuncs55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mul"#) -}
55116be7d1faf8a6ec00c0f38ed27e97
  specialFuncs56 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs57, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
c5650aae165b363b97bb4ec9919b1532
  specialFuncs57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sub"#) -}
4ba8f4f41d97e1049014c4ca7792a74f
  specialFuncs58 ::
    ([GHC.Types.Char], Lexer.SrcLoc, Types.F, GHC.Types.Int,
     (Types.RecursionClassification, Types.TypeClassification,
      GHC.Types.Bool),
     [GHC.Types.Int])
  {- Strictness: m,
     Unfolding: ((Types.specialFuncs59, Lexer.NoLoc, Types.SpecialF,
                  Types.specialFuncs17, Types.specialFuncs27,
                  GHC.Types.[] @ GHC.Types.Int)) -}
4565fa0a6c757d10fd51fa3dfa7700c4
  specialFuncs59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "add"#) -}
b8b1fdd1e2483caa8e4c0ea9c8d0d3ab
  specialFuncs6 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs45
                   Types.specialFuncs7) -}
7063e8d37317c50f8b1b0fbd9b5888b8
  specialFuncs7 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs42
                   Types.specialFuncs8) -}
00eb4ca7cf558ccc831ecc6ec4af24e1
  specialFuncs8 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs40
                   Types.specialFuncs9) -}
51587fc3f80496f51075247d2c8b2783
  specialFuncs9 :: [Types.TFunc]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.TFunc
                   Types.specialFuncs38
                   Types.specialFuncs10) -}
c8d0d69bbb8387440fca529d4c8ec5cc
  systemC :: Types.TState -> Types.SystemC
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds16 }) -}
0fcfc4ecac49a628942b54ac078904cd
  tCore :: Types.TState -> Types.TCore
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds7 }) -}
7c2e74d524abc20cd5c50935988ab20c
  tFuncs :: Types.TState -> [Types.TFunc]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds9 }) -}
b7762507a9a72864efc27d6bae262bb0
  tLogs :: Types.TState -> [Types.TLog]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds8 }) -}
213761bdee4a917517fdce5431e69cb1
  timesForked ::
    Types.TState -> [(Types.CompName, GHC.Base.String, GHC.Types.Int)]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds17 }) -}
e982020dcfb79f1f12af3489e27d98fe
  typeChanges :: Types.TState -> [(Types.CFType, Types.CFType)]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds6 }) -}
045741b960ff444a8a6a1a67f66d5d9a
  typeChangesInitial :: [(Types.CFType, Types.CFType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Types.CFType, Types.CFType)
                   Types.typeChangesInitial1
                   (GHC.Types.[] @ (Types.CFType, Types.CFType))) -}
836621cfd7841fa8517d995a5f0a6166
  typeChangesInitial1 :: (Types.CFType, Types.CFType)
  {- Strictness: m,
     Unfolding: ((Types.typeChangesInitial6,
                  Types.typeChangesInitial2)) -}
a52b216a9617b824ffad983961bc5465
  typeChangesInitial2 :: Types.CFType
  {- Strictness: m3,
     Unfolding: (Types.CTAExpr Types.typeChangesInitial3) -}
bdff2860b79a5090f892ce5dbe49f735
  typeChangesInitial3 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.typeChangesInitial4) -}
e8c2084a8ca4334601a628c0830ee974
  typeChangesInitial4 :: Lexer.Token
  {- Strictness: m8,
     Unfolding: (Lexer.Upp Types.typeChangesInitial5) -}
c8fae5ed0f8c0e471d55f8c149c865bd
  typeChangesInitial5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bit"#) -}
fcd49991b8c8dcdcdc2ce0fa4f3eee8c
  typeChangesInitial6 :: Types.CFType
  {- Strictness: m3,
     Unfolding: (Types.CTAExpr Types.typeChangesInitial7) -}
69809cddc512dbcff70d53c925594926
  typeChangesInitial7 :: Lexer.L Lexer.Token
  {- Strictness: m,
     Unfolding: (Lexer.L
                   @ Lexer.Token
                   Lexer.NoLoc
                   Types.typeChangesInitial8) -}
f47eb9cb6a3a06b535f07c93960f8c60
  typeChangesInitial8 :: Lexer.Token
  {- Strictness: m8,
     Unfolding: (Lexer.Upp Types.initialDataDecls13) -}
ed23ce516438c2751761067070fa2d23
  typeCheckState ::
    Types.TState -> [([Types.Constraint], [Types.CFType])]
  RecSel Left Types.TState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.TState) ->
                 case ds of wild { Types.TState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds4 }) -}
instance GHC.Classes.Eq [Types.CFType] = Types.$fEqCFType
instance GHC.Classes.Eq [Types.CProcUnit] = Types.$fEqCProcUnit
instance GHC.Classes.Eq [Types.ErrType] = Types.$fEqErrType
instance GHC.Classes.Eq [Types.F] = Types.$fEqF
instance GHC.Classes.Eq [Types.FCons] = Types.$fEqFCons
instance GHC.Classes.Eq [Types.FExpr] = Types.$fEqFExpr
instance GHC.Classes.Eq [Types.FGuards] = Types.$fEqFGuards
instance GHC.Classes.Eq [Types.FType] = Types.$fEqFType
instance GHC.Classes.Eq [Types.FVarCons] = Types.$fEqFVarCons
instance GHC.Classes.Eq [Types.I] = Types.$fEqI
instance GHC.Classes.Eq [Types.NameId] = Types.$fEqNameId
instance GHC.Classes.Eq [Types.RecursionClassification]
  = Types.$fEqRecursionClassification
instance GHC.Classes.Eq [Types.TCExpr] = Types.$fEqTCExpr
instance GHC.Classes.Eq [Types.TCFunc] = Types.$fEqTCFunc
instance GHC.Classes.Eq [Types.TCGuards] = Types.$fEqTCGuards
instance GHC.Classes.Eq [Types.TCore] = Types.$fEqTCore
instance GHC.Classes.Eq [Types.TErr] = Types.$fEqTErr
instance GHC.Classes.Eq [Types.TLog] = Types.$fEqTLog
instance GHC.Classes.Eq [Types.TStage] = Types.$fEqTStage
instance GHC.Classes.Eq [Types.TypeClassification]
  = Types.$fEqTypeClassification
instance GHC.Show.Show [Types.C] = Types.$fShowC
instance GHC.Show.Show [Types.CConstr] = Types.$fShowCConstr
instance GHC.Show.Show [Types.CFType] = Types.$fShowCFType
instance GHC.Show.Show [Types.CFunc] = Types.$fShowCFunc
instance GHC.Show.Show [Types.CGuards] = Types.$fShowCGuards
instance GHC.Show.Show [Types.CProcUnit] = Types.$fShowCProcUnit
instance GHC.Show.Show [Types.Core] = Types.$fShowCore
instance GHC.Show.Show [Types.ErrType] = Types.$fShowErrType
instance GHC.Show.Show [Types.F] = Types.$fShowF
instance GHC.Show.Show [Types.FCons] = Types.$fShowFCons
instance GHC.Show.Show [Types.FExpr] = Types.$fShowFExpr
instance GHC.Show.Show [Types.FGuards] = Types.$fShowFGuards
instance GHC.Show.Show [Types.FType] = Types.$fShowFType
instance GHC.Show.Show [Types.FVarCons] = Types.$fShowFVarCons
instance GHC.Show.Show [Types.I] = Types.$fShowI
instance GHC.Show.Show [Types.NameId] = Types.$fShowNameId
instance GHC.Show.Show [Types.RecursionClassification]
  = Types.$fShowRecursionClassification
instance GHC.Show.Show [Types.TCExpr] = Types.$fShowTCExpr
instance GHC.Show.Show [Types.TCFunc] = Types.$fShowTCFunc
instance GHC.Show.Show [Types.TCGuards] = Types.$fShowTCGuards
instance GHC.Show.Show [Types.TCore] = Types.$fShowTCore
instance GHC.Show.Show [Types.TErr] = Types.$fShowTErr
instance GHC.Show.Show [Types.TLog] = Types.$fShowTLog
instance GHC.Show.Show [Types.TStage] = Types.$fShowTStage
instance GHC.Show.Show [Types.TState] = Types.$fShowTState
instance GHC.Show.Show [Types.TransitionType]
  = Types.$fShowTransitionType
instance GHC.Show.Show [Types.TypeClassification]
  = Types.$fShowTypeClassification
"SPEC/Types $fEq(,) @ (L Name) @ FType" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                    Types.FType)
                                                        ($dEq :: GHC.Classes.Eq
                                                                   (Lexer.L Types.Name))
  GHC.Classes.$fEq(,) @ (Lexer.L Types.Name) @ Types.FType $dEq $dEq1
  = Types.$fEqF_$s$fEq(,)1
"SPEC/Types $fEq(,) @ (L Token) @ CFType" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                      Types.CFType)
                                                          ($dEq :: GHC.Classes.Eq
                                                                     (Lexer.L Lexer.Token))
  GHC.Classes.$fEq(,) @ (Lexer.L Lexer.Token)
                      @ Types.CFType
                      $dEq
                      $dEq1
  = Types.$fEqTCFunc_$s$fEq(,)1
"SPEC/Types $fEq(,) @ FExpr @ FExpr" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                 Types.FExpr)
                                                     ($dEq :: GHC.Classes.Eq Types.FExpr)
  GHC.Classes.$fEq(,) @ Types.FExpr @ Types.FExpr $dEq $dEq1
  = Types.$fEqF_$s$fEq(,)
"SPEC/Types $fEq(,) @ TCExpr @ TCExpr" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                   Types.TCExpr)
                                                       ($dEq :: GHC.Classes.Eq Types.TCExpr)
  GHC.Classes.$fEq(,) @ Types.TCExpr @ Types.TCExpr $dEq $dEq1
  = Types.$fEqTCFunc_$s$fEq(,)
"SPEC/Types $fEq(,) @ [Char] @ FType" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                  Types.FType)
                                                      ($dEq :: GHC.Classes.Eq [GHC.Types.Char])
  GHC.Classes.$fEq(,) @ [GHC.Types.Char] @ Types.FType $dEq $dEq1
  = Types.$s$fEq(,)
"SPEC/Types $fEqL @ Token" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      Lexer.Token)
  Parser.$fEqL @ Lexer.Token $dEq = Types.$fEqTCFunc_$s$fEqL
"SPEC/Types $fEqL @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       [GHC.Types.Char])
  Parser.$fEqL @ [GHC.Types.Char] $dEq = Types.$fEqF_$s$fEqL
"SPEC/Types $fEqL_$c/= @ Token" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                           Lexer.Token)
  Parser.$fEqL_$c/= @ Lexer.Token $dEq
  = Types.$fEqTCFunc_$s$fEqL_$c/=
"SPEC/Types $fEqL_$c/= @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            [GHC.Types.Char])
  Parser.$fEqL_$c/= @ [GHC.Types.Char] $dEq
  = Types.$fEqF_$s$fEqL_$c/=
"SPEC/Types $fEqL_$c== @ Token" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                           Lexer.Token)
  Parser.$fEqL_$c== @ Lexer.Token $dEq
  = Types.$fEqTCFunc_$s$fEqL_$c==
"SPEC/Types $fEqL_$c== @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            [GHC.Types.Char])
  Parser.$fEqL_$c== @ [GHC.Types.Char] $dEq
  = Types.$fEqF_$s$fEqL_$c==
"SPEC/Types $fShow(,)_$cshowList @ [Char] @ [Char]" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                  [GHC.Types.Char])
                                                                    ($dShow :: GHC.Show.Show
                                                                                 [GHC.Types.Char])
  GHC.Show.$fShow(,)_$cshowList @ [GHC.Types.Char]
                                @ [GHC.Types.Char]
                                $dShow
                                $dShow1
  = Types.$s$fShow(,)_$s$fShow(,)_$cshowList4
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

